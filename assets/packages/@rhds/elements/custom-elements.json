{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "elements/rh-accordion/rh-accordion-header.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Accordion Header",
          "name": "RhAccordionHeader",
          "cssParts": [
            {
              "description": "inline element containing the heading text or slotted heading content",
              "name": "text"
            },
            {
              "description": "container for accents within the header",
              "name": "accents"
            },
            {
              "description": "caret icon",
              "name": "icon"
            }
          ],
          "slots": [
            {
              "description": "We expect the light DOM of the rh-accordion-header to be a heading level tag (h1, h2, h3, h4, h5, h6)"
            },
            {
              "description": "These elements will appear inline with the accordion header, between the header and the chevron (or after the chevron and header in disclosure mode).",
              "name": "accents"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "1.0.0-beta.33",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "'angle-down'",
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#dir",
              "privacy": "private",
              "default": "new DirController(this)"
            },
            {
              "kind": "field",
              "name": "on",
              "type": {
                "text": "ColorTheme | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderAfterButton"
            }
          ],
          "events": [
            {
              "type": {
                "text": "AccordionHeaderChangeEvent"
              },
              "description": "when the open panels change",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "'angle-down'",
              "fieldName": "icon"
            },
            {
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "expanded"
            }
          ],
          "superclass": {
            "name": "BaseAccordionHeader",
            "package": "@patternfly/elements/pf-accordion/BaseAccordionHeader.js"
          },
          "tagName": "rh-accordion-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhAccordionHeader",
          "declaration": {
            "name": "RhAccordionHeader",
            "module": "elements/rh-accordion/rh-accordion-header.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-accordion-header",
          "declaration": {
            "name": "RhAccordionHeader",
            "module": "elements/rh-accordion/rh-accordion-header.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-accordion/rh-accordion-panel.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Accordion Panel",
          "name": "RhAccordionPanel",
          "slots": [
            {
              "description": "The content of the accordion panel can be any basic markup including but not limited to div, paragraph, or nested accordion panels."
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "1.0.0-beta.33",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "on",
              "type": {
                "text": "ColorTheme | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "colorPalette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "attribute": "color-palette",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "color-palette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "fieldName": "colorPalette"
            }
          ],
          "superclass": {
            "name": "BaseAccordionPanel",
            "package": "@patternfly/elements/pf-accordion/BaseAccordionPanel.js"
          },
          "tagName": "rh-accordion-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhAccordionPanel",
          "declaration": {
            "name": "RhAccordionPanel",
            "module": "elements/rh-accordion/rh-accordion-panel.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-accordion-panel",
          "declaration": {
            "name": "RhAccordionPanel",
            "module": "elements/rh-accordion/rh-accordion-panel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-accordion/rh-accordion.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Accordions toggle the visibility of sections of content.\nThey feature panels that consist of a section text label and a caret icon that collapses or expands to reveal more information.",
          "name": "RhAccordion",
          "slots": [
            {
              "description": "Place the `rh-accordion-header` and `rh-accordion-panel` elements here."
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "1.0.0-beta.33",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "on",
              "type": {
                "text": "ColorTheme | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "colorPalette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "attribute": "color-palette",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "large",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "large",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "bordered",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "bordered",
              "reflects": true
            }
          ],
          "events": [
            {
              "type": {
                "text": "AccordionExpandEvent"
              },
              "description": "when a panel expands",
              "name": "expand"
            },
            {
              "type": {
                "text": "AccordionCollapseEvent"
              },
              "description": "when a panel collapses",
              "name": "collapse"
            }
          ],
          "attributes": [
            {
              "name": "color-palette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "fieldName": "colorPalette"
            },
            {
              "name": "large",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "large"
            },
            {
              "name": "bordered",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "bordered"
            }
          ],
          "superclass": {
            "name": "BaseAccordion",
            "package": "@patternfly/elements/pf-accordion/BaseAccordion.js"
          },
          "summary": "Toggle the visibility of sections of content",
          "tagName": "rh-accordion",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/accordion/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-accordion/demo/rh-accordion.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/accordion/demo/color-context/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-accordion/demo/color-context.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/accordion/demo/right-to-left/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-accordion/demo/right-to-left.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhAccordion",
          "declaration": {
            "name": "RhAccordion",
            "module": "elements/rh-accordion/rh-accordion.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-accordion",
          "declaration": {
            "name": "RhAccordion",
            "module": "elements/rh-accordion/rh-accordion.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-alert/rh-alert.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AlertCloseEvent",
          "superclass": {
            "name": "ComposedEvent",
            "package": "@patternfly/pfe-core"
          }
        },
        {
          "kind": "class",
          "description": "An alert to display information on a website.\n\nBy default it is black text on a black background",
          "name": "RhAlert",
          "slots": [
            {
              "description": "Provide a description for the alert message",
              "name": ""
            },
            {
              "description": "Provide a header for the alert message.",
              "name": "header"
            },
            {
              "description": "Provide actions that the user can take for the alert",
              "name": "actions"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "1.0.0-beta.33",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "icon",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "'default' | 'error' | 'success' | 'warning' | 'danger' | 'info'"
              },
              "default": "'default'",
              "description": "Communicates the urgency of a message and is denoted by various styling configurations.\n\n- `default` - Indicates generic information or a message with no severity.\n- `info` - Indicates helpful information or a message with very little to no severity.\n- `success` - Indicates a success state, like if a process was completed without errors.\n- `warning` - Indicates a caution state, like a non-blocking error that might need to be fixed.\n- `danger` - Indicates a danger state, like an error that is blocking a user from completing a task.",
              "attribute": "state",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "toast",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "A Toast alert is used to present a global message about an event,\nupdate, or confirmation, like the result of a user action that cannot\nbe presented within a specific layout or component.",
              "attribute": "toast",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dismissable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Alert variants have different rules regarding their ability to be dismissed by a user.\nDefault, Info, and Success Inline alerts can be dismissed by a user selecting the close button.\nWarning and Danger Inline alerts can be dismissed by a user resolving the issues caused by the alert.\nAll Toast alerts can be dismissed by a user selecting the close button or waiting for them to time out.",
              "attribute": "dismissable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#slots",
              "privacy": "private",
              "default": "new SlotController(this, 'header', null, 'actions')"
            },
            {
              "kind": "method",
              "name": "#closeHandler",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "type": {
                "text": "AlertCloseEvent"
              },
              "description": "when the dismissable alert closes",
              "name": "close"
            }
          ],
          "attributes": [
            {
              "name": "state",
              "type": {
                "text": "'default' | 'error' | 'success' | 'warning' | 'danger' | 'info'"
              },
              "default": "'default'",
              "description": "Communicates the urgency of a message and is denoted by various styling configurations.\n\n - `default` - Indicates generic information or a message with no severity.\n - `info` - Indicates helpful information or a message with very little to no severity.\n - `success` - Indicates a success state, like if a process was completed without errors.\n - `warning` - Indicates a caution state, like a non-blocking error that might need to be fixed.\n - `danger` - Indicates a danger state, like an error that is blocking a user from completing a task.",
              "fieldName": "state"
            },
            {
              "name": "variant",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "variant"
            },
            {
              "name": "toast",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "A Toast alert is used to present a global message about an event,\nupdate, or confirmation, like the result of a user action that cannot\nbe presented within a specific layout or component.",
              "fieldName": "toast"
            },
            {
              "name": "dismissable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Alert variants have different rules regarding their ability to be dismissed by a user.\nDefault, Info, and Success Inline alerts can be dismissed by a user selecting the close button.\nWarning and Danger Inline alerts can be dismissed by a user resolving the issues caused by the alert.\nAll Toast alerts can be dismissed by a user selecting the close button or waiting for them to time out.",
              "fieldName": "dismissable"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "An alert to display information on a website.",
          "tagName": "rh-alert",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/alert/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-alert/demo/rh-alert.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AlertCloseEvent",
          "declaration": {
            "name": "AlertCloseEvent",
            "module": "elements/rh-alert/rh-alert.js"
          }
        },
        {
          "kind": "js",
          "name": "RhAlert",
          "declaration": {
            "name": "RhAlert",
            "module": "elements/rh-alert/rh-alert.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-alert",
          "declaration": {
            "name": "RhAlert",
            "module": "elements/rh-alert/rh-alert.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-avatar/rh-avatar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "An Avatar is a placeholder graphic for a photo or an image that is placed\nto the left or on top of text.",
          "name": "RhAvatar",
          "cssProperties": [
            {
              "description": "list of colors to use when generating avatars",
              "name": "--rh-avatar-colors",
              "syntax": "<color>[]"
            },
            {
              "description": "size of the avatar. Use icon tokens.",
              "name": "--rh-avatar-size",
              "syntax": "<length>",
              "default": "64px"
            }
          ],
          "slots": [
            {
              "description": "The subject's name",
              "name": ""
            },
            {
              "description": "auxiliary information about the subject, e.g. job title",
              "name": "subtitle"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "The URL to the user's custom avatar image.\n\nIt will be displayed instead of a random pattern.",
              "attribute": "src",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The user's name, either given name and family name, or username.\n\nWhen displaying a pattern, the name will be used to seed the pattern generator.",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "subtitle",
              "type": {
                "text": "string | undefined"
              },
              "description": "The auxiliary information about the user, e.g. job title",
              "attribute": "subtitle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "layout",
              "type": {
                "text": "'inline'|'block' | undefined"
              },
              "description": "The type of pattern to display.",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "'squares'|'triangles' | undefined"
              },
              "description": "The type of pattern to display.",
              "attribute": "pattern",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "plain",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, hides the title and subtitle",
              "attribute": "plain",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "on",
              "type": {
                "text": "ColorTheme | undefined"
              },
              "privacy": "private",
              "attribute": "on"
            },
            {
              "kind": "field",
              "name": "#style",
              "privacy": "private",
              "type": {
                "text": "CSSStyleDeclaration | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#pattern",
              "privacy": "private",
              "type": {
                "text": "RandomPatternController | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#screen",
              "privacy": "private",
              "default": "new ScreenSizeController(this)"
            },
            {
              "kind": "method",
              "name": "#initPattern",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updatePattern"
            }
          ],
          "attributes": [
            {
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "The URL to the user's custom avatar image.\n\nIt will be displayed instead of a random pattern.",
              "fieldName": "src"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The user's name, either given name and family name, or username.\n\nWhen displaying a pattern, the name will be used to seed the pattern generator.",
              "fieldName": "name"
            },
            {
              "name": "subtitle",
              "type": {
                "text": "string | undefined"
              },
              "description": "The auxiliary information about the user, e.g. job title",
              "fieldName": "subtitle"
            },
            {
              "name": "layout",
              "type": {
                "text": "'inline'|'block' | undefined"
              },
              "description": "The type of pattern to display.",
              "fieldName": "layout"
            },
            {
              "name": "pattern",
              "type": {
                "text": "'squares'|'triangles' | undefined"
              },
              "description": "The type of pattern to display.",
              "fieldName": "pattern"
            },
            {
              "name": "plain",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, hides the title and subtitle",
              "fieldName": "plain"
            },
            {
              "name": "on",
              "type": {
                "text": "ColorTheme | undefined"
              },
              "fieldName": "on"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "An avatar is a visual used to represent a user.",
          "tagName": "rh-avatar",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/avatar/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-avatar/demo/rh-avatar.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/avatar/demo/color-context/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-avatar/demo/color-context.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhAvatar",
          "declaration": {
            "name": "RhAvatar",
            "module": "elements/rh-avatar/rh-avatar.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-avatar",
          "declaration": {
            "name": "RhAvatar",
            "module": "elements/rh-avatar/rh-avatar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-badge/rh-badge.js",
      "declarations": [
        {
          "kind": "class",
          "description": "A badge is used to annotate other information with numerical content.",
          "name": "RhBadge",
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "1.0.0-beta.33",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "'info'|'success'|'moderate'|'important'|'critical' | undefined"
              },
              "description": "Denotes the state-of-affairs this badge represents\nOptions include read and unread",
              "attribute": "state",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "number",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "number",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "threshold",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "threshold",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "state",
              "type": {
                "text": "'info'|'success'|'moderate'|'important'|'critical' | undefined"
              },
              "description": "Denotes the state-of-affairs this badge represents\nOptions include read and unread",
              "fieldName": "state"
            },
            {
              "name": "number",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "number"
            },
            {
              "name": "threshold",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "threshold"
            }
          ],
          "superclass": {
            "name": "BaseBadge",
            "package": "@patternfly/elements/pf-badge/BaseBadge.js"
          },
          "tagName": "rh-badge",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/badge/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-badge/demo/rh-badge.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhBadge",
          "declaration": {
            "name": "RhBadge",
            "module": "elements/rh-badge/rh-badge.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-badge",
          "declaration": {
            "name": "RhBadge",
            "module": "elements/rh-badge/rh-badge.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-blockquote/rh-blockquote.js",
      "declarations": [
        {
          "kind": "class",
          "description": "A blockquote for displaying quote, author, and author title.",
          "name": "RhBlockquote",
          "slots": [
            {
              "description": "Provide a quote for the blockquote",
              "name": ""
            },
            {
              "description": "Provide an author for the blockquote",
              "name": "author"
            },
            {
              "description": "Provide an author title for the blockquote",
              "name": "title"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "'Blockquote'",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "colorPalette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "description": "Set the colorPalette of the blockquote. Possible values are:\n- `lightest` (default)\n- `darkest`",
              "attribute": "color-palette",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "on",
              "type": {
                "text": "ColorTheme | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "'center'|'inline-start'"
              },
              "default": "'inline-start'",
              "description": "Set the alignment of the blockquote. Possible values are:\n- `left` (default)\n- `center`",
              "attribute": "align",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "highlight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optional highlight attribute that, when present, shows a highlight on side of blockquote.",
              "attribute": "highlight",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'default'|'large'"
              },
              "default": "'default'",
              "description": "Set the text size of the blockquote. Possible values are:\n- `default`\n- `large`",
              "attribute": "size",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "'Blockquote'",
              "fieldName": "title"
            },
            {
              "name": "color-palette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "description": "Set the colorPalette of the blockquote. Possible values are:\n- `lightest` (default)\n- `darkest`",
              "fieldName": "colorPalette"
            },
            {
              "name": "align",
              "type": {
                "text": "'center'|'inline-start'"
              },
              "default": "'inline-start'",
              "description": "Set the alignment of the blockquote. Possible values are:\n- `left` (default)\n- `center`",
              "fieldName": "align"
            },
            {
              "name": "highlight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optional highlight attribute that, when present, shows a highlight on side of blockquote.",
              "fieldName": "highlight"
            },
            {
              "name": "size",
              "type": {
                "text": "'default'|'large'"
              },
              "default": "'default'",
              "description": "Set the text size of the blockquote. Possible values are:\n- `default`\n- `large`",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "A blockquote for displaying quote, author, and author title.",
          "tagName": "rh-blockquote",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/blockquote/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-blockquote/demo/rh-blockquote.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhBlockquote",
          "declaration": {
            "name": "RhBlockquote",
            "module": "elements/rh-blockquote/rh-blockquote.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-blockquote",
          "declaration": {
            "name": "RhBlockquote",
            "module": "elements/rh-blockquote/rh-blockquote.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-button/rh-button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RhButton",
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'primary'|'secondary'|'tertiary'|'close'|'play'"
              },
              "default": "'primary'",
              "description": "Changes the style of the button.\n- Primary: Used for the most important call to action on a page. Try to\nlimit primary buttons to one per page.\n- Secondary: Use secondary buttons for general actions on a page, that\ndon’t require as much emphasis as primary button actions. For example,\nyou can use secondary buttons where there are multiple actions, like in\ntoolbars or data lists.\n- Tertiary: Tertiary buttons are flexible and can be used as needed.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "danger",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "danger",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "on",
              "type": {
                "text": "ColorTheme | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#variant",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "renderDefaultIcon",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'primary'|'secondary'|'tertiary'|'close'|'play'"
              },
              "default": "'primary'",
              "description": "Changes the style of the button.\n- Primary: Used for the most important call to action on a page. Try to\n  limit primary buttons to one per page.\n- Secondary: Use secondary buttons for general actions on a page, that\n  don’t require as much emphasis as primary button actions. For example,\n  you can use secondary buttons where there are multiple actions, like in\n  toolbars or data lists.\n- Tertiary: Tertiary buttons are flexible and can be used as needed.",
              "fieldName": "variant"
            },
            {
              "name": "danger",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "danger"
            }
          ],
          "superclass": {
            "name": "BaseButton",
            "package": "@patternfly/elements/pf-button/BaseButton.js"
          },
          "tagName": "rh-button",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/button/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-button/demo/rh-button.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/button/demo/color-context/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-button/demo/color-context.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/button/demo/form-control/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-button/demo/form-control.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhButton",
          "declaration": {
            "name": "RhButton",
            "module": "elements/rh-button/rh-button.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-button",
          "declaration": {
            "name": "RhButton",
            "module": "elements/rh-button/rh-button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-context-provider/rh-context-provider.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RhContextProvider",
          "members": [
            {
              "kind": "field",
              "name": "colorPalette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "description": "Sets color palette, which affects the element's styles as well as descendants' color theme.\nOverrides parent color context.\nYour theme will influence these colors so check there first if you are seeing inconsistencies.\nSee [CSS Custom Properties](#css-custom-properties) for default values",
              "attribute": "color-palette",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "color-palette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "description": "Sets color palette, which affects the element's styles as well as descendants' color theme.\nOverrides parent color context.\nYour theme will influence these colors so check there first if you are seeing inconsistencies.\nSee [CSS Custom Properties](#css-custom-properties) for default values",
              "fieldName": "colorPalette"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "rh-context-provider",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/context-provider/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-context-provider/demo/rh-context-provider.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/context-provider/demo/nested-contexts/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-context-provider/demo/nested-contexts.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhContextProvider",
          "declaration": {
            "name": "RhContextProvider",
            "module": "elements/rh-context-provider/rh-context-provider.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-context-provider",
          "declaration": {
            "name": "RhContextProvider",
            "module": "elements/rh-context-provider/rh-context-provider.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-cta/rh-cta.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Call to action stands out from regular hypertext links, and is used for linking users to webpages.",
          "name": "RhCta",
          "cssParts": [
            {
              "description": "container element for slotted CTA",
              "name": "container"
            }
          ],
          "slots": [
            {
              "description": "We expect an anchor tag, `<a>` with an `href`, to be the first child inside `rh-cta` element. Less preferred but allowed for specific use-cases include: `<button>` (note however that the `button` tag is not supported for the default CTA styles).",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "1.0.0-beta.33",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'primary'|'secondary'|'brick' | undefined"
              },
              "description": "Indicates the importance of this call-to-action in the context of the page.\nWill also influence how the call-to-action is styled.\n- **Primary**: Use for the primary or most important link. This variant is the highest in\n    hierarchy and can also be used to play a video in a Modal or large container.\n- **Secondary**: Use for secondary or general links. This variant is lower in hierarchy than\n    the Primary variant and can be used multiple times in the same container or layout.\n- **Brick**: Use to group links together. Only the Brick variant can stretch to fit a\n    container or grid, otherwise the text label padding in other variants stays the same.\n- Default (no variant): Use for tertiary or the least important links. This variant is the\n    lowest in hierarchy and can be used multiple times in the same container or layout.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "colorPalette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "description": "Sets color palette, which affects the element's styles as well as descendants' color theme.\nOverrides parent color context.\nYour theme will influence these colors so check there first if you are seeing inconsistencies.\nSee [CSS Custom Properties](#css-custom-properties) for default values",
              "attribute": "color-palette",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "on",
              "type": {
                "text": "ColorTheme | undefined"
              },
              "privacy": "private",
              "description": "Sets color theme based on parent context"
            },
            {
              "kind": "field",
              "name": "cta",
              "type": {
                "text": "HTMLAnchorElement|HTMLButtonElement|null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The slotted `<a>` or `<button>` element"
            },
            {
              "kind": "field",
              "name": "#initializing",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true while the initializer method is running - to prevent double-execution"
            },
            {
              "kind": "field",
              "name": "#dir",
              "privacy": "private",
              "default": "new DirController(this)",
              "description": "Is the element in an RTL context?"
            },
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)"
            },
            {
              "kind": "field",
              "name": "#isDefault",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'primary'|'secondary'|'brick' | undefined"
              },
              "description": "Indicates the importance of this call-to-action in the context of the page.\nWill also influence how the call-to-action is styled.\n  - **Primary**: Use for the primary or most important link. This variant is the highest in\n      hierarchy and can also be used to play a video in a Modal or large container.\n  - **Secondary**: Use for secondary or general links. This variant is lower in hierarchy than\n      the Primary variant and can be used multiple times in the same container or layout.\n  - **Brick**: Use to group links together. Only the Brick variant can stretch to fit a\n      container or grid, otherwise the text label padding in other variants stays the same.\n  - Default (no variant): Use for tertiary or the least important links. This variant is the\n      lowest in hierarchy and can be used multiple times in the same container or layout.",
              "fieldName": "variant"
            },
            {
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "icon"
            },
            {
              "name": "color-palette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "description": "Sets color palette, which affects the element's styles as well as descendants' color theme.\nOverrides parent color context.\nYour theme will influence these colors so check there first if you are seeing inconsistencies.\nSee [CSS Custom Properties](#css-custom-properties) for default values",
              "fieldName": "colorPalette"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Directs a user to other pages or displays extra content",
          "tagName": "rh-cta",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/call-to-action/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-cta/demo/rh-cta.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/call-to-action/demo/analytics/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-cta/demo/analytics.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhCta",
          "declaration": {
            "name": "RhCta",
            "module": "elements/rh-cta/rh-cta.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-cta",
          "declaration": {
            "name": "RhCta",
            "module": "elements/rh-cta/rh-cta.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-demo/rh-demo.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RhDemo",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              }
            },
            {
              "kind": "method",
              "name": "syncCodeEditor",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "syncPreview",
              "privacy": "public"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "rh-demo",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhDemo",
          "declaration": {
            "name": "RhDemo",
            "module": "elements/rh-demo/rh-demo.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-demo",
          "declaration": {
            "name": "RhDemo",
            "module": "elements/rh-demo/rh-demo.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-dialog/rh-dialog.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Dialog",
          "name": "RhDialog",
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "1.0.0-beta.33",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "closeOnOutsideClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "#screenSize",
              "privacy": "private",
              "default": "new ScreenSizeController(this)"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'video' | undefined"
              },
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'video' | undefined"
              },
              "fieldName": "type"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "open"
            }
          ],
          "superclass": {
            "name": "PfModal",
            "package": "@patternfly/elements/pf-modal/pf-modal.js"
          },
          "tagName": "rh-dialog",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/dialog/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-dialog/demo/rh-dialog.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhDialog",
          "declaration": {
            "name": "RhDialog",
            "module": "elements/rh-dialog/rh-dialog.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-dialog",
          "declaration": {
            "name": "RhDialog",
            "module": "elements/rh-dialog/rh-dialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-footer/rh-footer-block.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RhFooterBlock",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "rh-footer-block",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhFooterBlock",
          "declaration": {
            "name": "RhFooterBlock",
            "module": "elements/rh-footer/rh-footer-block.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-footer-block",
          "declaration": {
            "name": "RhFooterBlock",
            "module": "elements/rh-footer/rh-footer-block.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-footer/rh-footer-copyright.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RhFooterCopyright",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "rh-footer-copyright",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhFooterCopyright",
          "declaration": {
            "name": "RhFooterCopyright",
            "module": "elements/rh-footer/rh-footer-copyright.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-footer-copyright",
          "declaration": {
            "name": "RhFooterCopyright",
            "module": "elements/rh-footer/rh-footer-copyright.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-footer/rh-footer-links.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RhFooterLinks",
          "members": [
            {
              "kind": "field",
              "name": "headerHidden",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Visibily hide the header slot. Setting this to true will not affect\naria-labelledby.",
              "attribute": "header-hidden",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "logger",
              "privacy": "private",
              "default": "new Logger(this)"
            },
            {
              "kind": "field",
              "name": "slots",
              "privacy": "protected",
              "default": "new SlotController(this, {\n    slots: ['header'],\n  })"
            },
            {
              "kind": "method",
              "name": "updateAccessibility",
              "privacy": "public"
            }
          ],
          "attributes": [
            {
              "name": "header-hidden",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Visibily hide the header slot. Setting this to true will not affect\naria-labelledby.",
              "fieldName": "headerHidden"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "rh-footer-links",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhFooterLinks",
          "declaration": {
            "name": "RhFooterLinks",
            "module": "elements/rh-footer/rh-footer-links.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-footer-links",
          "declaration": {
            "name": "RhFooterLinks",
            "module": "elements/rh-footer/rh-footer-links.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-footer/rh-footer-responsive.css.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "responsiveStyles",
          "default": "css`\n  @media screen and (min-width: ${tabletPortraitBreakpoint}) {\n    .global-base {\n      grid-template-columns: 4fr 4fr 4fr;\n      grid-template-areas:\n        'logo      logo      logo'\n        'primary   primary   primary'\n        'spacer    spacer    spacer'\n        'secondary secondary secondary';\n    }\n    .global-base:is(.hasTertiary) {\n      grid-template-columns: 4fr 4fr 4fr;\n      grid-template-areas:\n        'logo      logo      logo'\n        'primary   primary   primary'\n        'spacer    spacer    spacer'\n        'secondary secondary tertiary';\n    }\n  }\n\n  @media screen and (min-width: ${tabletLandscapeBreakpoint}) {\n    /* :not(.nothing) is a hack to match CSS specificity with :is(.hasTertiary) */\n    .global-base:not(.nothing) {\n      grid-template-columns: auto 10fr 2fr;\n      grid-template-rows: max-content max-content;\n      grid-template-areas:\n        'logo primary  tertiary'\n        'logo secondary tertiary';\n      gap: 24px 32px;\n    }\n\n    .global-primary {\n      display: flex;\n    }\n\n    .main {\n      padding-bottom: 64px;\n    }\n  }\n\n  .spacer {\n    grid-area: spacer;\n    border-bottom: 1px solid var(--_border-color);\n  }\n\n  @media screen and (min-width: ${tabletLandscapeBreakpoint}) {\n    .spacer {\n      display: none;\n    }\n  }\n\n  @media screen and (min-width: ${tabletLandscapeBreakpoint}) {\n    .global-tertiary {\n      display: grid;\n      justify-content: flex-end;\n      align-items: center;\n    }\n  }\n\n  @media screen and (min-width: ${mobilePortraitBreakpoint}) {\n    .global-links-primary {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n    }\n    .global-links-secondary {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n    }\n  }\n\n  @media screen and (min-width: ${tabletPortraitBreakpoint}) {\n    .global-links-primary {\n      display: grid;\n      grid-template-columns: 1fr 1fr 1fr;\n    }\n\n    .global-links-secondary {\n      display: grid;\n      grid-template-columns: 1fr 1fr 1fr;\n    }\n\n    .hasTertiary .global-links-secondary {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n    }\n  }\n\n  @media screen and (min-width: ${tabletLandscapeBreakpoint}) {\n    .global-links-primary {\n      display: flex;\n      flex-flow: row wrap;\n      align-items: center;\n    }\n  }\n\n  @media screen and (min-width: ${tabletLandscapeBreakpoint}) {\n    :not(.hasTertiary) .global-links-secondary {\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      gap: 8px 24px;\n    }\n  }\n\n  @media screen and (max-width: ${tabletLandscapeBreakpoint}) {\n    .global-logo {\n      grid-area: logo;\n    }\n\n    .global-primary {\n      grid-area: primary;\n    }\n  }\n\n  @media screen and (max-width: ${tabletLandscapeBreakpoint}) {\n    /* Equalize padding on mobile */\n    .section {\n      --_section-side-gap: var(--rh-footer-section-side-gap, var(--rh-space-2xl, 32px));\n    }\n\n    /* hide the header border on mobile */\n    .header:after {\n      display: none;\n    }\n\n    /* force the mobile links menu to go flush against the header */\n    .main {\n      padding-top: 0;\n    }\n  }\n\n  @media screen and (min-width: ${tabletLandscapeBreakpoint}) and (max-width: ${desktopLargeBreakpoint}) {\n    /* Equalize padding on mobile */\n    .section {\n      --_section-side-gap: var(--rh-footer-section-side-gap, var(--rh-space-2xl, 32px));\n    }\n\n    .header,\n    .main {\n      /* switch header to use grid instead */\n      display: grid;\n      grid-template-columns: 8fr 4fr;\n    }\n  }\n\n  @media screen and (min-width: ${desktopLargeBreakpoint}) {\n    .section {\n      --_section-side-gap: var(--rh-footer-section-side-gap, var(--rh-space-2xl, 32px));\n    }\n\n    .header,\n    .main {\n      /* switch header to use grid instead */\n      display: grid;\n      grid-template-columns: 8fr 4fr;\n    }\n  }\n\n  @media screen and (min-width: ${tabletPortraitBreakpoint}) {\n    .isMobile .links ::slotted(ul) {\n      grid-template-columns: 1fr 1fr;\n    }\n  }\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "responsiveStyles",
          "declaration": {
            "name": "responsiveStyles",
            "module": "elements/rh-footer/rh-footer-responsive.css.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-footer/rh-footer-social-link.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RhFooterSocialLink",
          "members": [
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)"
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "icon"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "rh-footer-social-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhFooterSocialLink",
          "declaration": {
            "name": "RhFooterSocialLink",
            "module": "elements/rh-footer/rh-footer-social-link.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-footer-social-link",
          "declaration": {
            "name": "RhFooterSocialLink",
            "module": "elements/rh-footer/rh-footer-social-link.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-footer/rh-footer.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "rh-footer",
          "declaration": {
            "name": "RhFooter",
            "module": "/elements/rh-footer/RhFooter.js"
          }
        },
        {
          "kind": "js",
          "name": "RhFooter",
          "declaration": {
            "name": "RhFooter",
            "module": "elements/rh-footer/rh-footer.js"
          }
        },
        {
          "kind": "js",
          "name": "RhGlobalFooter",
          "declaration": {
            "name": "RhGlobalFooter",
            "module": "elements/rh-footer/rh-footer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-footer/rh-global-footer.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RhGlobalFooter",
          "cssParts": [
            {
              "name": "base"
            },
            {
              "name": "base"
            },
            {
              "name": "logo"
            },
            {
              "name": "logo-image"
            },
            {
              "name": "primary"
            },
            {
              "name": "primary-start"
            },
            {
              "name": "primary-end"
            },
            {
              "name": "secondary"
            },
            {
              "name": "secondary-start"
            },
            {
              "name": "secondary-end"
            },
            {
              "name": "links-primary"
            },
            {
              "name": "links-secondary"
            },
            {
              "name": "tertiary"
            }
          ],
          "slots": [
            {
              "name": "logo"
            },
            {
              "name": "logo-image"
            },
            {
              "name": "primary"
            },
            {
              "name": "primary-start"
            },
            {
              "name": "primary-end"
            },
            {
              "name": "secondary"
            },
            {
              "name": "secondary-start"
            },
            {
              "name": "secondary-end"
            },
            {
              "name": "links-primary"
            },
            {
              "name": "links-secondary"
            },
            {
              "name": "tertiary"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "colorPalette",
              "type": {
                "text": "ColorPalette"
              },
              "default": "'darker'",
              "attribute": "color-palette",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#slots",
              "privacy": "private",
              "default": "new SlotController(this, {\n    slots: ['primary-start', 'primary-end', 'secondary-start', 'secondary-end', 'links-primary', 'links-secondary', 'tertiary']\n  })"
            }
          ],
          "attributes": [
            {
              "name": "color-palette",
              "type": {
                "text": "ColorPalette"
              },
              "default": "'darker'",
              "fieldName": "colorPalette"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "rh-global-footer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhGlobalFooter",
          "declaration": {
            "name": "RhGlobalFooter",
            "module": "elements/rh-footer/rh-global-footer.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-global-footer",
          "declaration": {
            "name": "RhGlobalFooter",
            "module": "elements/rh-footer/rh-global-footer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SecondaryNavDropdownExpandEvent",
          "superclass": {
            "name": "ComposedEvent",
            "package": "@patternfly/pfe-core"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "RhNavigationSecondaryDropdown",
          "slots": [
            {
              "description": "Link for dropdown, expects `<a>`",
              "name": "link"
            },
            {
              "description": "Menu for dropdown, expects `<rh-navigation-secondary-menu>`",
              "name": "menu"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#slots",
              "privacy": "private",
              "default": "new SlotController(this, { slots: ['link', 'menu'] })"
            },
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)"
            },
            {
              "kind": "field",
              "name": "_container",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "colorPalette",
              "type": {
                "text": "ColorPalette"
              },
              "default": "'lighter'",
              "attribute": "color-palette",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_expandedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldVal",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "Boolean value in string form"
                },
                {
                  "name": "newVal",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "Boolean value in string form"
                }
              ],
              "description": "When expanded property changes, check the new value, if true\nrun the `#open()` method, if false run the `#close()` method."
            },
            {
              "kind": "method",
              "name": "_clickHandler",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "When a dropdown is clicked set expanded to the opposite of the expanded property\nand then dispatch that value in a SecondaryNavDropdownExpandEvent"
            },
            {
              "kind": "method",
              "name": "#open",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets or removes attributes needed to open a dropdown menu",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets or removes attributes needed to close a dropdown menu",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "type": {
                "text": "SecondaryNavDropdownExpandEvent"
              },
              "description": "Fires when a dropdown is clicked",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "color-palette",
              "type": {
                "text": "ColorPalette"
              },
              "default": "'lighter'",
              "fieldName": "colorPalette"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "A wrapper component to upgrade a top level nav link to include dropdown functionality",
          "tagName": "rh-navigation-secondary-dropdown",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "RhSecondaryNavDropdown",
          "members": [
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryDropdown",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.js"
              }
            },
            {
              "kind": "field",
              "name": "#slots",
              "privacy": "private",
              "default": "new SlotController(this, { slots: ['link', 'menu'] })",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryDropdown",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.js"
              }
            },
            {
              "kind": "field",
              "name": "_container",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "inheritedFrom": {
                "name": "RhNavigationSecondaryDropdown",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.js"
              }
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryDropdown",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.js"
              }
            },
            {
              "kind": "field",
              "name": "colorPalette",
              "type": {
                "text": "ColorPalette"
              },
              "default": "'lighter'",
              "attribute": "color-palette",
              "reflects": true,
              "inheritedFrom": {
                "name": "RhNavigationSecondaryDropdown",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.js"
              }
            },
            {
              "kind": "method",
              "name": "_expandedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldVal",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "Boolean value in string form"
                },
                {
                  "name": "newVal",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "Boolean value in string form"
                }
              ],
              "description": "When expanded property changes, check the new value, if true\nrun the `#open()` method, if false run the `#close()` method.",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryDropdown",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.js"
              }
            },
            {
              "kind": "method",
              "name": "_clickHandler",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "When a dropdown is clicked set expanded to the opposite of the expanded property\nand then dispatch that value in a SecondaryNavDropdownExpandEvent",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryDropdown",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.js"
              }
            },
            {
              "kind": "method",
              "name": "#open",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets or removes attributes needed to open a dropdown menu",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryDropdown",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.js"
              }
            },
            {
              "kind": "method",
              "name": "#close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets or removes attributes needed to close a dropdown menu",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryDropdown",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.js"
              }
            }
          ],
          "superclass": {
            "name": "RhNavigationSecondaryDropdown",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.ts"
          },
          "tagName": "rh-secondary-nav-dropdown",
          "customElement": true,
          "attributes": [
            {
              "name": "color-palette",
              "type": {
                "text": "ColorPalette"
              },
              "default": "'lighter'",
              "fieldName": "colorPalette",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryDropdown",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "SecondaryNavDropdownExpandEvent"
              },
              "description": "Fires when a dropdown is clicked",
              "name": "change",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryDropdown",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SecondaryNavDropdownExpandEvent",
          "declaration": {
            "name": "SecondaryNavDropdownExpandEvent",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.js"
          }
        },
        {
          "kind": "js",
          "name": "RhNavigationSecondaryDropdown",
          "declaration": {
            "name": "RhNavigationSecondaryDropdown",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-navigation-secondary-dropdown",
          "declaration": {
            "name": "RhNavigationSecondaryDropdown",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-secondary-nav-dropdown",
          "declaration": {
            "name": "RhSecondaryNavDropdown",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-dropdown.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-navigation-secondary/rh-navigation-secondary-menu-section.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RhNavigationSecondaryMenuSection",
          "cssParts": [
            {
              "description": "container, <section> element",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "Adds a header tag to section, expects `<h1>, <h2>, <h3>, <h4>, <h5>, <h6>`",
              "name": "header"
            },
            {
              "description": "Adds a ul tag to section, expects `<ul>, <ol>`",
              "name": "links"
            },
            {
              "description": "Adds a section level CTA, expects `<rh-cta>`",
              "name": "cta"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)"
            },
            {
              "kind": "method",
              "name": "#updateAccessibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Finds all list elements `<ul>, <ol>` and if the list does not have an\n`aria-labelledby` attribute finds the previousElementSibling header\n`<h1-6>` tags if available assigns an id or uses preexisting id\nto that header, then uses that id to the list on the `aria-labelledby`.",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "'A menu section which auto upgrades header and sibling link list accessibility attributes'",
          "tagName": "rh-navigation-secondary-menu-section",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "RhSecondaryNavMenuSection",
          "members": [
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryMenuSection",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu-section.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAccessibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Finds all list elements `<ul>, <ol>` and if the list does not have an\n`aria-labelledby` attribute finds the previousElementSibling header\n`<h1-6>` tags if available assigns an id or uses preexisting id\nto that header, then uses that id to the list on the `aria-labelledby`.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryMenuSection",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu-section.js"
              }
            }
          ],
          "superclass": {
            "name": "RhNavigationSecondaryMenuSection",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu-section.ts"
          },
          "tagName": "rh-secondary-nav-menu-section",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhNavigationSecondaryMenuSection",
          "declaration": {
            "name": "RhNavigationSecondaryMenuSection",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu-section.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-navigation-secondary-menu-section",
          "declaration": {
            "name": "RhNavigationSecondaryMenuSection",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu-section.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-secondary-nav-menu-section",
          "declaration": {
            "name": "RhSecondaryNavMenuSection",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu-section.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-navigation-secondary/rh-navigation-secondary-menu.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RhNavigationSecondaryMenu",
          "cssParts": [
            {
              "description": "container - <div> element, wrapper for menus",
              "name": "container"
            },
            {
              "description": "container - <div> element, wrapper for full-width menus",
              "name": "full-width"
            },
            {
              "description": "container - <div> element, wrapper for fixed-width menus",
              "name": "fixed-width"
            },
            {
              "description": "container - <div> element, wrapper for menu sections",
              "name": "sections"
            },
            {
              "description": "container - <div> element, wrapper for cta",
              "name": "cta"
            }
          ],
          "slots": [
            {
              "description": "Section, expects `<ul>, <ol>, <rh-navigation-secondary-section>` elements, applies auto grid styles on full-width",
              "name": "section"
            },
            {
              "description": "Menu level CTA, expects a `<rh-cta>`",
              "name": "cta"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "layout",
              "type": {
                "text": "'fixed-width' | 'full-width'"
              },
              "default": "'full-width'",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_container",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#screenSize",
              "privacy": "private",
              "default": "new ScreenSizeController(this)"
            },
            {
              "kind": "field",
              "name": "_compact",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`compact` property is true when viewport `(min-width: ${tabletLandscapeBreakpoint})`.\nProperty is observed for changes, and its value is updated using matchMediaController\nwhen viewport changes at breakpoint or first load of the component."
            },
            {
              "kind": "field",
              "name": "screenSize",
              "privacy": "protected",
              "default": "new ScreenSizeController(this, 'tabletLandscape', {\n     onChange: matches => {\n       this._compact = !matches;\n     }\n   })",
              "description": "ScreenSizeController effects callback to set _compact"
            },
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`visible` property is false initially then when a dropdown is clicked is toggled"
            }
          ],
          "attributes": [
            {
              "name": "layout",
              "type": {
                "text": "'fixed-width' | 'full-width'"
              },
              "default": "'full-width'",
              "fieldName": "layout"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "'A pop up menu for secondary nav, available in full-width and fixed-with sizes'",
          "tagName": "rh-navigation-secondary-menu",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "RhSecondaryNavMenu",
          "members": [
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)"
            },
            {
              "kind": "field",
              "name": "layout",
              "type": {
                "text": "'fixed-width' | 'full-width'"
              },
              "default": "'full-width'",
              "attribute": "layout",
              "reflects": true,
              "inheritedFrom": {
                "name": "RhNavigationSecondaryMenu",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu.js"
              }
            },
            {
              "kind": "field",
              "name": "_container",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "inheritedFrom": {
                "name": "RhNavigationSecondaryMenu",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu.js"
              }
            },
            {
              "kind": "field",
              "name": "#screenSize",
              "privacy": "private",
              "default": "new ScreenSizeController(this)",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryMenu",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu.js"
              }
            },
            {
              "kind": "field",
              "name": "_compact",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`compact` property is true when viewport `(min-width: ${tabletLandscapeBreakpoint})`.\nProperty is observed for changes, and its value is updated using matchMediaController\nwhen viewport changes at breakpoint or first load of the component.",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryMenu",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu.js"
              }
            },
            {
              "kind": "field",
              "name": "screenSize",
              "privacy": "protected",
              "default": "new ScreenSizeController(this, 'tabletLandscape', {\n     onChange: matches => {\n       this._compact = !matches;\n     }\n   })",
              "description": "ScreenSizeController effects callback to set _compact",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryMenu",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu.js"
              }
            },
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`visible` property is false initially then when a dropdown is clicked is toggled",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryMenu",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu.js"
              }
            }
          ],
          "superclass": {
            "name": "RhNavigationSecondaryMenu",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu.ts"
          },
          "tagName": "rh-secondary-nav-menu",
          "customElement": true,
          "attributes": [
            {
              "name": "layout",
              "type": {
                "text": "'fixed-width' | 'full-width'"
              },
              "default": "'full-width'",
              "fieldName": "layout",
              "inheritedFrom": {
                "name": "RhNavigationSecondaryMenu",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhNavigationSecondaryMenu",
          "declaration": {
            "name": "RhNavigationSecondaryMenu",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-navigation-secondary-menu",
          "declaration": {
            "name": "RhNavigationSecondaryMenu",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-secondary-nav-menu",
          "declaration": {
            "name": "RhSecondaryNavMenu",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-menu.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-navigation-secondary/rh-navigation-secondary-overlay.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SecondaryNavOverlayChangeEvent",
          "superclass": {
            "name": "ComposedEvent",
            "package": "@patternfly/pfe-core"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "RhNavigationSecondaryOverlay",
          "members": [
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_openChanged",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "_oldValue",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "newValue",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "An overlay element to cover content with an opacity when navigation is expanded.",
          "tagName": "rh-navigation-secondary-overlay",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SecondaryNavOverlayChangeEvent",
          "declaration": {
            "name": "SecondaryNavOverlayChangeEvent",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-overlay.js"
          }
        },
        {
          "kind": "js",
          "name": "RhNavigationSecondaryOverlay",
          "declaration": {
            "name": "RhNavigationSecondaryOverlay",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-overlay.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-navigation-secondary-overlay",
          "declaration": {
            "name": "RhNavigationSecondaryOverlay",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary-overlay.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-navigation-secondary/rh-navigation-secondary.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Red Hat Secondary Nav",
          "name": "RhNavigationSecondary",
          "cssParts": [
            {
              "description": "container, <nav> element",
              "name": "nav"
            },
            {
              "description": "container, <div> element",
              "name": "container"
            },
            {
              "description": "container, <div> element",
              "name": "cta"
            }
          ],
          "slots": [
            {
              "description": "Logo added to the main nav bar, expects a `<a> | <a><svg/></a> | <a><img/></a>`",
              "name": "logo"
            },
            {
              "description": "Navigation list added to the main nav bar, expects a `<ul>`",
              "name": "nav"
            },
            {
              "description": "Nav bar level CTA, expects a `<rh-cta>",
              "name": "cta"
            },
            {
              "description": "Text label for the mobile menu button, for l10n. Defaults to \"Menu\"",
              "name": "mobile-menu"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)"
            },
            {
              "kind": "field",
              "name": "#logoCopy",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#dir",
              "privacy": "private",
              "default": "new DirController(this)",
              "description": "Is the element in an RTL context?"
            },
            {
              "kind": "field",
              "name": "_overlay",
              "type": {
                "text": "RhNavigationSecondaryOverlay"
              },
              "description": "executes this.shadowRoot.querySelector('rh-navigation-secondary-overlay')"
            },
            {
              "kind": "field",
              "name": "_container",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "executes this.shadowRoot.querySelector('#container')"
            },
            {
              "kind": "field",
              "name": "_nav",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "executes this.shadowRoot.querySelector('nav');"
            },
            {
              "kind": "field",
              "name": "_mobileMenuButton",
              "type": {
                "text": "HTMLButtonElement | undefined"
              },
              "description": "executes this.shadowRoot.querySelector('button')"
            },
            {
              "kind": "field",
              "name": "_compact",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`_compact` property is true when viewport `(min-width: ${tabletLandscapeBreakpoint})`.\nProperty is observed for changes, and its value is updated using matchMediaController\nwhen viewport changes at breakpoint or first load of the component."
            },
            {
              "kind": "field",
              "name": "screenSize",
              "privacy": "protected",
              "default": "new ScreenSizeController(this, 'tabletLandscape', {\n    onChange: matches => {\n      this._compact = !matches;\n    }\n  })",
              "description": "ScreenSizeController effects callback to set _compact"
            },
            {
              "kind": "field",
              "name": "_mobileMenuExpanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`_mobileMenuExpanded` property is toggled when the mobile menu button is clicked,\na focusout event occurs, or on an overlay click event.  It also switches state\nwhen the viewport changes breakpoints depending on if a dropdown is open or not."
            },
            {
              "kind": "field",
              "name": "mainNav",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Define custom attribute 'main' and watch for DOM changes of the attribute",
              "attribute": "main",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "colorPalette",
              "type": {
                "text": "NavPalette"
              },
              "default": "'lighter'",
              "attribute": "color-palette",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_ctaColorPalette",
              "type": {
                "text": "NavPalette | 'lightest'"
              },
              "privacy": "private",
              "description": "If the host color-palette=\"lighter\", the cta color context should be on=\"light\"\nby default.  However when the host color-palette=\"dark\", the cta context should be\non=\"dark\" when in desktop mode, but on=\"light\" when in mobile compact mode because the cta shifts\nto a white background in the mobile compact nav. This state property is set on firstUpdated()\nand __compactChanged() and is used on a wrapping `<rh-context-provider>` around the cta allowing\nit to dynamically change with viewport changes."
            },
            {
              "kind": "method",
              "name": "isDropdown",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element | null"
                  },
                  "description": ":"
                }
              ],
              "description": "Checks if passed in element is a RhNavigationSecondaryDropdown"
            },
            {
              "kind": "method",
              "name": "open",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Public API, opens a specific dropdown based on index.\nCloses all open dropdowns before opening specified.\nToggles overlay to open"
            },
            {
              "kind": "method",
              "name": "close",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Public API, closes all open dropdowns"
            },
            {
              "kind": "method",
              "name": "_dropdownChangeHandler",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "{SecondaryNavDropdownExpandEvent}"
                }
              ],
              "description": "When dropdown event is triggered gets dropdown index that triggered\nevent then closes all dropdowns.\nIf the event is to open a dropdown, run #expand(index)\nIf isMobile is set dispatch an SecondaryNavOverlayChangeEvent event\nto open the overlay"
            },
            {
              "kind": "method",
              "name": "_focusOutHandler",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "description": "Handles when focus changes outside of the navigation\nIf _compact is set, close the mobileMenu\nCloses all dropdowns and toggles overlay to closed"
            },
            {
              "kind": "method",
              "name": "_overlayClickHandler",
              "privacy": "private",
              "description": "Handles when the overlay receives a click event\nCloses all dropdowns and toggles overlay to closed\nIf _compact then closes mobile menu to closed",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__compactChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldVal",
                  "optional": true,
                  "type": {
                    "text": "boolean | undefined"
                  }
                },
                {
                  "name": "newVal",
                  "optional": true,
                  "type": {
                    "text": "boolean | undefined"
                  }
                }
              ],
              "description": "When _compact value is changed\nGet all open navMenus\nIf _compact is true, open mobile menu\nIf _compact is false, close mobile menu and close overlay"
            },
            {
              "kind": "method",
              "name": "_keyboardControls",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Closes dropdown menu on keydown, then places\nfocus on last button clicked"
            },
            {
              "kind": "method",
              "name": "#getOpenDropdowns",
              "return": {
                "type": {
                  "text": "RhNavigationSecondaryDropdown[]"
                }
              },
              "description": "Finds all open dropdowns",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#getDropdownIndex",
              "return": {
                "type": {
                  "text": "void | number"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "description": "Gets all dropdowns and finds the element given and returns its index",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#dropdownByIndex",
              "return": {
                "type": {
                  "text": "void | RhNavigationSecondaryDropdown"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Gets all dropdowns and returns the dropdown given an index",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#expand",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Opens a dropdown given an index",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#allDropdowns",
              "return": {
                "type": {
                  "text": "RhNavigationSecondaryDropdown[]"
                }
              },
              "description": "Gets all dropdowns",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#closeDropdown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "dropdown",
                  "type": {
                    "text": "RhNavigationSecondaryDropdown"
                  }
                }
              ],
              "description": "Sets property expanded=false on dropdown given",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#openDropdown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "dropdown",
                  "type": {
                    "text": "RhNavigationSecondaryDropdown"
                  }
                }
              ],
              "description": "Sets property expanded=true on dropdown given",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_toggleNavOverlay",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "SecondaryNavOverlayChangeEvent"
                  }
                }
              ],
              "description": "Toggles the overlay triggered by eventListener"
            },
            {
              "kind": "method",
              "name": "#updateAccessibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Upgrades the aria attributes on upgrade",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#toggleMobileMenu",
              "description": "Toggles the mobile menu from `@click` of the _mobileMenuButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setNavOrder",
              "description": "Set the aria label on the custom tag to designate the nav as main or secondary based on attributes set by the content author",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "private"
            }
          ],
          "events": [
            {
              "type": {
                "text": "SecondaryNavOverlayChangeEvent"
              },
              "description": "Fires when an dropdown is opened or closed in desktop view or when the mobile menu button is toggled in mobile view.",
              "name": "overlay-change"
            }
          ],
          "attributes": [
            {
              "name": "main",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Define custom attribute 'main' and watch for DOM changes of the attribute",
              "fieldName": "mainNav"
            },
            {
              "name": "color-palette",
              "type": {
                "text": "NavPalette"
              },
              "default": "'lighter'",
              "fieldName": "colorPalette"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "A non primary navigation bar.",
          "tagName": "rh-navigation-secondary",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/navigation-secondary/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-navigation-secondary/demo/rh-navigation-secondary.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/navigation-secondary/demo/analytics/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-navigation-secondary/demo/analytics.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/navigation-secondary/demo/dark-variant/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-navigation-secondary/demo/dark-variant.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/navigation-secondary/demo/deprecated/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-navigation-secondary/demo/deprecated.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/navigation-secondary/demo/proxy/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-navigation-secondary/demo/proxy.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/navigation-secondary/demo/translation/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-navigation-secondary/demo/translation.html"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "RhSecondaryNav",
          "members": [
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "field",
              "name": "#logoCopy",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "field",
              "name": "#dir",
              "privacy": "private",
              "default": "new DirController(this)",
              "description": "Is the element in an RTL context?",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "field",
              "name": "_overlay",
              "type": {
                "text": "RhNavigationSecondaryOverlay"
              },
              "description": "executes this.shadowRoot.querySelector('rh-navigation-secondary-overlay')",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "field",
              "name": "_container",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "executes this.shadowRoot.querySelector('#container')",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "field",
              "name": "_nav",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "executes this.shadowRoot.querySelector('nav');",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "field",
              "name": "_mobileMenuButton",
              "type": {
                "text": "HTMLButtonElement | undefined"
              },
              "description": "executes this.shadowRoot.querySelector('button')",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "field",
              "name": "_compact",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`_compact` property is true when viewport `(min-width: ${tabletLandscapeBreakpoint})`.\nProperty is observed for changes, and its value is updated using matchMediaController\nwhen viewport changes at breakpoint or first load of the component.",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "field",
              "name": "screenSize",
              "privacy": "protected",
              "default": "new ScreenSizeController(this, 'tabletLandscape', {\n    onChange: matches => {\n      this._compact = !matches;\n    }\n  })",
              "description": "ScreenSizeController effects callback to set _compact",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "field",
              "name": "_mobileMenuExpanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`_mobileMenuExpanded` property is toggled when the mobile menu button is clicked,\na focusout event occurs, or on an overlay click event.  It also switches state\nwhen the viewport changes breakpoints depending on if a dropdown is open or not.",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "field",
              "name": "mainNav",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Define custom attribute 'main' and watch for DOM changes of the attribute",
              "attribute": "main",
              "reflects": true,
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "field",
              "name": "colorPalette",
              "type": {
                "text": "NavPalette"
              },
              "default": "'lighter'",
              "attribute": "color-palette",
              "reflects": true,
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "field",
              "name": "_ctaColorPalette",
              "type": {
                "text": "NavPalette | 'lightest'"
              },
              "privacy": "private",
              "description": "If the host color-palette=\"lighter\", the cta color context should be on=\"light\"\nby default.  However when the host color-palette=\"dark\", the cta context should be\non=\"dark\" when in desktop mode, but on=\"light\" when in mobile compact mode because the cta shifts\nto a white background in the mobile compact nav. This state property is set on firstUpdated()\nand __compactChanged() and is used on a wrapping `<rh-context-provider>` around the cta allowing\nit to dynamically change with viewport changes.",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "isDropdown",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element | null"
                  },
                  "description": ":"
                }
              ],
              "description": "Checks if passed in element is a RhNavigationSecondaryDropdown",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "open",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Public API, opens a specific dropdown based on index.\nCloses all open dropdowns before opening specified.\nToggles overlay to open",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "close",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Public API, closes all open dropdowns",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "_dropdownChangeHandler",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "{SecondaryNavDropdownExpandEvent}"
                }
              ],
              "description": "When dropdown event is triggered gets dropdown index that triggered\nevent then closes all dropdowns.\nIf the event is to open a dropdown, run #expand(index)\nIf isMobile is set dispatch an SecondaryNavOverlayChangeEvent event\nto open the overlay",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "_focusOutHandler",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "description": "Handles when focus changes outside of the navigation\nIf _compact is set, close the mobileMenu\nCloses all dropdowns and toggles overlay to closed",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "_overlayClickHandler",
              "privacy": "private",
              "description": "Handles when the overlay receives a click event\nCloses all dropdowns and toggles overlay to closed\nIf _compact then closes mobile menu to closed",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "__compactChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldVal",
                  "optional": true,
                  "type": {
                    "text": "boolean | undefined"
                  }
                },
                {
                  "name": "newVal",
                  "optional": true,
                  "type": {
                    "text": "boolean | undefined"
                  }
                }
              ],
              "description": "When _compact value is changed\nGet all open navMenus\nIf _compact is true, open mobile menu\nIf _compact is false, close mobile menu and close overlay",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "_keyboardControls",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Closes dropdown menu on keydown, then places\nfocus on last button clicked",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "#getOpenDropdowns",
              "return": {
                "type": {
                  "text": "RhNavigationSecondaryDropdown[]"
                }
              },
              "description": "Finds all open dropdowns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "#getDropdownIndex",
              "return": {
                "type": {
                  "text": "void | number"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "description": "Gets all dropdowns and finds the element given and returns its index",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "#dropdownByIndex",
              "return": {
                "type": {
                  "text": "void | RhNavigationSecondaryDropdown"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Gets all dropdowns and returns the dropdown given an index",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "#expand",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Opens a dropdown given an index",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "#allDropdowns",
              "return": {
                "type": {
                  "text": "RhNavigationSecondaryDropdown[]"
                }
              },
              "description": "Gets all dropdowns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "#closeDropdown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "dropdown",
                  "type": {
                    "text": "RhNavigationSecondaryDropdown"
                  }
                }
              ],
              "description": "Sets property expanded=false on dropdown given",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "#openDropdown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "dropdown",
                  "type": {
                    "text": "RhNavigationSecondaryDropdown"
                  }
                }
              ],
              "description": "Sets property expanded=true on dropdown given",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "_toggleNavOverlay",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "SecondaryNavOverlayChangeEvent"
                  }
                }
              ],
              "description": "Toggles the overlay triggered by eventListener",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateAccessibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Upgrades the aria attributes on upgrade",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "#toggleMobileMenu",
              "description": "Toggles the mobile menu from `@click` of the _mobileMenuButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            },
            {
              "kind": "method",
              "name": "#setNavOrder",
              "description": "Set the aria label on the custom tag to designate the nav as main or secondary based on attributes set by the content author",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
              }
            }
          ],
          "superclass": {
            "name": "RhNavigationSecondary",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary.ts"
          },
          "tagName": "rh-secondary-nav",
          "customElement": true,
          "attributes": [
            {
              "name": "main",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Define custom attribute 'main' and watch for DOM changes of the attribute",
              "fieldName": "mainNav",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.ts"
              }
            },
            {
              "name": "color-palette",
              "type": {
                "text": "NavPalette"
              },
              "default": "'lighter'",
              "fieldName": "colorPalette",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "SecondaryNavOverlayChangeEvent"
              },
              "description": "Fires when an dropdown is opened or closed in desktop view or when the mobile menu button is toggled in mobile view.",
              "name": "overlay-change",
              "inheritedFrom": {
                "name": "RhNavigationSecondary",
                "module": "elements/rh-navigation-secondary/rh-navigation-secondary.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhNavigationSecondary",
          "declaration": {
            "name": "RhNavigationSecondary",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-navigation-secondary",
          "declaration": {
            "name": "RhNavigationSecondary",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-secondary-nav",
          "declaration": {
            "name": "RhSecondaryNav",
            "module": "elements/rh-navigation-secondary/rh-navigation-secondary.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-pagination/rh-pagination.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Pagination",
          "name": "RhPagination",
          "slots": [
            {
              "description": "Place element content here",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "1.0.0-beta.33",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "overflow",
              "type": {
                "text": "'start' | 'end' | 'both' | null"
              },
              "default": "null",
              "description": "Override `overflow` values set from HTML or JS.\n`overflow` should ideally be private, but because\nwe can't do `::slotted(nav ol li)`, we need to reflect\nit to a host attribute, so that lightdom CSS can target\nthe list items.",
              "attribute": "overflow",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Page navigation'",
              "description": "Accessible label for the 'nav' element",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelFirst",
              "type": {
                "text": "string"
              },
              "default": "'first page'",
              "description": "Accessible label for the 'first page' button",
              "attribute": "label-first"
            },
            {
              "kind": "field",
              "name": "labelPrevious",
              "type": {
                "text": "string"
              },
              "default": "'previous page'",
              "description": "Accessible label for the 'previous page' button",
              "attribute": "label-previous"
            },
            {
              "kind": "field",
              "name": "labelNext",
              "type": {
                "text": "string"
              },
              "default": "'next page'",
              "description": "Accessible label for the 'next page' button",
              "attribute": "label-next"
            },
            {
              "kind": "field",
              "name": "labelLast",
              "type": {
                "text": "string"
              },
              "default": "'last page'",
              "description": "Accessible label for the 'last page' button",
              "attribute": "label-last"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#mo",
              "privacy": "private",
              "default": "new MutationObserver(() => this.#update())"
            },
            {
              "kind": "field",
              "name": "#screen",
              "privacy": "private",
              "default": "new ScreenSizeController(this)"
            },
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)"
            },
            {
              "kind": "field",
              "name": "#ol",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#links",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#firstLink",
              "privacy": "private",
              "type": {
                "text": "HTMLAnchorElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#lastLink",
              "privacy": "private",
              "type": {
                "text": "HTMLAnchorElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#nextLink",
              "privacy": "private",
              "type": {
                "text": "HTMLAnchorElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#prevLink",
              "privacy": "private",
              "type": {
                "text": "HTMLAnchorElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#currentLink",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#currentIndex",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "#currentPage",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#update",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#getOverflow",
              "return": {
                "type": {
                  "text": "'start' | 'end' | 'both' | null"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#getCurrentLink",
              "return": {
                "type": {
                  "text": "HTMLAnchorElement | null"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updateLightDOMRefs",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#go",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "'first'|'prev'|'next'|'last'|number"
                  }
                }
              ],
              "description": "1. Normalize the element state\n2. validate and act on the input\n3. update the element in case a full browser navigation was prevented (e.g. SPA routing)",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onKeyup",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "first",
              "description": "Navigate to the first page"
            },
            {
              "kind": "method",
              "name": "prev",
              "description": "Navigate to the previous page"
            },
            {
              "kind": "method",
              "name": "next",
              "description": "Navigate to the next page"
            },
            {
              "kind": "method",
              "name": "last",
              "description": "Navigate to the last page"
            },
            {
              "kind": "method",
              "name": "go",
              "parameters": [
                {
                  "name": "page",
                  "type": {
                    "text": "'first'|'prev'|'next'|'last'|number"
                  }
                }
              ],
              "description": "Navigate to a specific page"
            }
          ],
          "attributes": [
            {
              "name": "overflow",
              "type": {
                "text": "'start' | 'end' | 'both' | null"
              },
              "default": "null",
              "description": "Override `overflow` values set from HTML or JS.\n`overflow` should ideally be private, but because\nwe can't do `::slotted(nav ol li)`, we need to reflect\nit to a host attribute, so that lightdom CSS can target\nthe list items.",
              "fieldName": "overflow"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Page navigation'",
              "description": "Accessible label for the 'nav' element",
              "fieldName": "label"
            },
            {
              "name": "label-first",
              "type": {
                "text": "string"
              },
              "default": "'first page'",
              "description": "Accessible label for the 'first page' button",
              "fieldName": "labelFirst"
            },
            {
              "name": "label-previous",
              "type": {
                "text": "string"
              },
              "default": "'previous page'",
              "description": "Accessible label for the 'previous page' button",
              "fieldName": "labelPrevious"
            },
            {
              "name": "label-next",
              "type": {
                "text": "string"
              },
              "default": "'next page'",
              "description": "Accessible label for the 'next page' button",
              "fieldName": "labelNext"
            },
            {
              "name": "label-last",
              "type": {
                "text": "string"
              },
              "default": "'last page'",
              "description": "Accessible label for the 'last page' button",
              "fieldName": "labelLast"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "rh-pagination",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/pagination/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-pagination/demo/rh-pagination.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/pagination/demo/many-pages/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-pagination/demo/many-pages.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhPagination",
          "declaration": {
            "name": "RhPagination",
            "module": "elements/rh-pagination/rh-pagination.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-pagination",
          "declaration": {
            "name": "RhPagination",
            "module": "elements/rh-pagination/rh-pagination.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-spinner/rh-spinner.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Spinner consists of an animated circle and sometimes a text label, and it indicates that a section is loading.",
          "name": "RhSpinner",
          "slots": [
            {
              "description": "Optional text label below the animated circle.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "colorPalette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "description": "Sets color palette, which affects the element's styles as well as descendants' color theme.\nOverrides parent color context.\nYour theme will influence these colors so check there first if you are seeing inconsistencies.\nSee [CSS Custom Properties](#css-custom-properties) for default values",
              "attribute": "color-palette",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "on",
              "type": {
                "text": "ColorTheme | undefined"
              },
              "privacy": "private",
              "description": "Sets color theme based on parent context"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "SpinnerSize"
              },
              "default": "'lg'",
              "description": "Preset sizes for the spinner",
              "attribute": "size",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "color-palette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "description": "Sets color palette, which affects the element's styles as well as descendants' color theme.\nOverrides parent color context.\nYour theme will influence these colors so check there first if you are seeing inconsistencies.\nSee [CSS Custom Properties](#css-custom-properties) for default values",
              "fieldName": "colorPalette"
            },
            {
              "name": "size",
              "type": {
                "text": "SpinnerSize"
              },
              "default": "'lg'",
              "description": "Preset sizes for the spinner",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "BaseSpinner",
            "package": "@patternfly/elements/pf-spinner/BaseSpinner.js"
          },
          "tagName": "rh-spinner",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/spinner/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-spinner/demo/rh-spinner.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhSpinner",
          "declaration": {
            "name": "RhSpinner",
            "module": "elements/rh-spinner/rh-spinner.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-spinner",
          "declaration": {
            "name": "RhSpinner",
            "module": "elements/rh-spinner/rh-spinner.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-stat/rh-stat.js",
      "declarations": [
        {
          "kind": "class",
          "description": "A statistic showcases a data point or quick fact in a way that visually stands out.\nIt consists of a number/percentage and body text in its simplest form.\nIt can also include an icon, title, and a call to action.",
          "name": "RhStat",
          "slots": [
            {
              "description": "Optional icon",
              "name": "icon"
            },
            {
              "description": "Statistic title",
              "name": "title"
            },
            {
              "description": "Statistic data",
              "name": "statistic"
            },
            {
              "description": "Call to action",
              "name": "cta"
            },
            {
              "description": "Description of the stat",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "1.0.0-beta.33",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "on",
              "type": {
                "text": "ColorTheme | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "top",
              "type": {
                "text": "'default'|'statistic'"
              },
              "default": "'default'",
              "attribute": "top",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'default'|'large'"
              },
              "default": "'default'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "isMobile",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "is-mobile",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#screenSize",
              "privacy": "private",
              "default": "new ScreenSizeController(this)"
            },
            {
              "kind": "field",
              "name": "#slots",
              "privacy": "private",
              "default": "new SlotController(this, null, 'icon', 'title', 'statistic', 'cta')"
            },
            {
              "kind": "field",
              "name": "#mo",
              "privacy": "private",
              "default": "new MutationObserver(() => this.#onMutation())"
            },
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)"
            },
            {
              "kind": "method",
              "name": "#updateIcons",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onMutation",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "icon"
            },
            {
              "name": "top",
              "type": {
                "text": "'default'|'statistic'"
              },
              "default": "'default'",
              "fieldName": "top"
            },
            {
              "name": "size",
              "type": {
                "text": "'default'|'large'"
              },
              "default": "'default'",
              "fieldName": "size"
            },
            {
              "name": "is-mobile",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "isMobile"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "rh-stat",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/statistic/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-stat/demo/rh-stat.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhStat",
          "declaration": {
            "name": "RhStat",
            "module": "elements/rh-stat/rh-stat.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-stat",
          "declaration": {
            "name": "RhStat",
            "module": "elements/rh-stat/rh-stat.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-subnav/rh-subnav.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Subnav provides a tabs-like navigation experience",
          "name": "RhSubnav",
          "cssParts": [
            {
              "description": "container, <div> element",
              "name": "container"
            },
            {
              "description": "<slot> element",
              "name": "links"
            }
          ],
          "slots": [
            {
              "description": "Place navigation links here, expects collection of `<a>`",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "scrollIconLeft",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "static": true,
              "default": "'angle-left'",
              "description": "Icon name to use for the scroll left button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "scrollIconRight",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "static": true,
              "default": "'angle-right'",
              "description": "Icon name to use for the scroll right button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "scrollIconSet",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "static": true,
              "default": "'fas'",
              "description": "Icon set to use for the scroll buttons",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "instances",
              "privacy": "private",
              "static": true,
              "default": "new Set<RhSubnav>()"
            },
            {
              "kind": "field",
              "name": "",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "rh-subnav",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/subnav/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-subnav/demo/rh-subnav.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/subnav/demo/color-context/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-subnav/demo/color-context.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhSubnav",
          "declaration": {
            "name": "RhSubnav",
            "module": "elements/rh-subnav/rh-subnav.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-subnav",
          "declaration": {
            "name": "RhSubnav",
            "module": "elements/rh-subnav/rh-subnav.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-tabs/rh-tab-panel.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Tabs",
          "name": "RhTabPanel",
          "slots": [
            {
              "description": "Place element content here",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "1.0.0-beta.33",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "on",
              "type": {
                "text": "ColorTheme | undefined"
              },
              "privacy": "private",
              "description": "Sets color theme based on parent context"
            },
            {
              "kind": "field",
              "name": "colorPalette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "description": "Sets color palette, which affects the element's styles as well as descendants' color theme.\nOverrides parent color context.\nYour theme will influence these colors so check there first if you are seeing inconsistencies.\nSee [CSS Custom Properties](#css-custom-properties) for default values",
              "attribute": "color-palette",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "color-palette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "description": "Sets color palette, which affects the element's styles as well as descendants' color theme.\nOverrides parent color context.\nYour theme will influence these colors so check there first if you are seeing inconsistencies.\nSee [CSS Custom Properties](#css-custom-properties) for default values",
              "fieldName": "colorPalette"
            }
          ],
          "superclass": {
            "name": "BaseTabPanel",
            "package": "@patternfly/elements/pf-tabs/BaseTabPanel.js"
          },
          "tagName": "rh-tab-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhTabPanel",
          "declaration": {
            "name": "RhTabPanel",
            "module": "elements/rh-tabs/rh-tab-panel.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-tab-panel",
          "declaration": {
            "name": "RhTabPanel",
            "module": "elements/rh-tabs/rh-tab-panel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-tabs/rh-tab.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Tabs",
          "name": "RhTab",
          "slots": [
            {
              "description": "Place element content here",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "1.0.0-beta.33",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "on",
              "type": {
                "text": "ColorTheme | undefined"
              },
              "privacy": "private",
              "description": "Sets color theme based on parent context"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "BaseTab",
            "package": "@patternfly/elements/pf-tabs/BaseTab.js"
          },
          "tagName": "rh-tab",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhTab",
          "declaration": {
            "name": "RhTab",
            "module": "elements/rh-tabs/rh-tab.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-tab",
          "declaration": {
            "name": "RhTab",
            "module": "elements/rh-tabs/rh-tab.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-tabs/rh-tabs.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Tabs",
          "name": "RhTabs",
          "members": [
            {
              "kind": "method",
              "name": "isTab",
              "static": true,
              "return": {
                "type": {
                  "text": "element is RhTab"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isPanel",
              "static": true,
              "return": {
                "type": {
                  "text": "element is RhTabPanel"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "on",
              "type": {
                "text": "ColorTheme | undefined"
              },
              "privacy": "private",
              "description": "Sets color theme based on parent context"
            },
            {
              "kind": "field",
              "name": "colorPalette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "description": "Sets color palette, which affects the element's styles as well as descendants' color theme.\nOverrides parent color context.\nYour theme will influence these colors so check there first if you are seeing inconsistencies.\nSee [CSS Custom Properties](#css-custom-properties) for default values",
              "attribute": "color-palette",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "centered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "centered",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "'base' | null | undefined"
              },
              "default": "null",
              "attribute": "theme",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "box",
              "type": {
                "text": "'box' | 'inset' | null | undefined"
              },
              "default": "null",
              "attribute": "box",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "vertical",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "canShowScrollButtons",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "readonly": true
            }
          ],
          "attributes": [
            {
              "name": "color-palette",
              "type": {
                "text": "ColorPalette | undefined"
              },
              "description": "Sets color palette, which affects the element's styles as well as descendants' color theme.\nOverrides parent color context.\nYour theme will influence these colors so check there first if you are seeing inconsistencies.\nSee [CSS Custom Properties](#css-custom-properties) for default values",
              "fieldName": "colorPalette"
            },
            {
              "name": "centered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "centered"
            },
            {
              "name": "theme",
              "type": {
                "text": "'base' | null | undefined"
              },
              "default": "null",
              "fieldName": "theme"
            },
            {
              "name": "box",
              "type": {
                "text": "'box' | 'inset' | null | undefined"
              },
              "default": "null",
              "fieldName": "box"
            },
            {
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "vertical"
            }
          ],
          "superclass": {
            "name": "BaseTabs",
            "package": "@patternfly/elements/pf-tabs/BaseTabs.js"
          },
          "tagName": "rh-tabs",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/tabs/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-tabs/demo/rh-tabs.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/tabs/demo/color-context/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-tabs/demo/color-context.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/tabs/demo/right-to-left/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-tabs/demo/right-to-left.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhTab",
          "declaration": {
            "name": "RhTab",
            "module": "elements/rh-tabs/rh-tabs.js"
          }
        },
        {
          "kind": "js",
          "name": "RhTabs",
          "declaration": {
            "name": "RhTabs",
            "module": "elements/rh-tabs/rh-tabs.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-tabs",
          "declaration": {
            "name": "RhTabs",
            "module": "elements/rh-tabs/rh-tabs.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-tag/rh-tag.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Tooltip",
          "name": "RhTag",
          "cssProperties": [
            {
              "description": "",
              "name": "--rh-tag-padding-block-start",
              "syntax": "<length>",
              "default": "4px"
            },
            {
              "description": "",
              "name": "--rh-tag-padding-inline-end",
              "syntax": "<length>",
              "default": "8px"
            },
            {
              "description": "",
              "name": "--rh-tag-padding-block-end",
              "syntax": "<length>",
              "default": "4px"
            },
            {
              "description": "",
              "name": "--rh-tag-padding-inline-start",
              "syntax": "<length>",
              "default": "8px"
            },
            {
              "description": "",
              "name": "--rh-tag-margin-inline-end",
              "syntax": "<length>",
              "default": "4px"
            }
          ],
          "cssParts": [
            {
              "description": "container for the label icon",
              "name": "icon"
            }
          ],
          "slots": [
            {
              "description": "Contains the labels's icon, e.g. web-icon-alert-success.",
              "name": "icon"
            },
            {
              "description": "Must contain the text for the label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'filled' | undefined"
              },
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "TagColor | undefined"
              },
              "attribute": "color"
            },
            {
              "kind": "method",
              "name": "renderDefaultIcon",
              "privacy": "protected",
              "description": "RhIcon does not yet exist, so we are using pfe-icon until available\n<rh-icon ?hidden=${!this.icon} icon=${this.icon} set=\"${this.set}\" size=\"sm\"></rh-icon>"
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "icon"
            },
            {
              "name": "variant",
              "type": {
                "text": "'filled' | undefined"
              },
              "fieldName": "variant"
            },
            {
              "name": "color",
              "type": {
                "text": "TagColor | undefined"
              },
              "fieldName": "color"
            }
          ],
          "superclass": {
            "name": "BaseLabel",
            "package": "@patternfly/elements/pf-label/BaseLabel.js"
          },
          "tagName": "rh-tag",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/tag/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-tag/demo/rh-tag.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhTag",
          "declaration": {
            "name": "RhTag",
            "module": "elements/rh-tag/rh-tag.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-tag",
          "declaration": {
            "name": "RhTag",
            "module": "elements/rh-tag/rh-tag.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-tooltip/rh-tooltip.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Tooltip",
          "name": "RhTooltip",
          "slots": [
            {
              "description": "Place element content here",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "1.0.0-beta.33",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "on",
              "type": {
                "text": "ColorTheme | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "Placement"
              },
              "default": "'top'",
              "attribute": "position"
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "content"
            }
          ],
          "attributes": [
            {
              "name": "position",
              "type": {
                "text": "Placement"
              },
              "default": "'top'",
              "fieldName": "position"
            },
            {
              "name": "content",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "content"
            }
          ],
          "superclass": {
            "name": "BaseTooltip",
            "package": "@patternfly/elements/pf-tooltip/BaseTooltip.js"
          },
          "tagName": "rh-tooltip",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/tooltip/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-tooltip/demo/rh-tooltip.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhTooltip",
          "declaration": {
            "name": "RhTooltip",
            "module": "elements/rh-tooltip/rh-tooltip.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "rh-tooltip",
          "declaration": {
            "name": "RhTooltip",
            "module": "elements/rh-tooltip/rh-tooltip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/rh-footer/RhFooter.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RhFooter",
          "cssProperties": [
            {
              "description": "",
              "name": "--rh-footer-icon-color",
              "default": "#8a8d90"
            },
            {
              "description": "",
              "name": "--rh-footer-icon-color-hover",
              "default": "#b8bbbe"
            },
            {
              "description": "",
              "name": "--rh-footer-border-color",
              "default": "#6a6e73"
            },
            {
              "description": "",
              "name": "--rh-footer-accent-color",
              "default": "#e00"
            },
            {
              "description": "",
              "name": "--rh-footer-section-side-gap",
              "default": "32px"
            },
            {
              "description": "",
              "name": "--rh-footer-links-gap",
              "default": "8px"
            },
            {
              "description": "",
              "name": "--rh-footer-link-header-font-size",
              "default": "0.875em"
            },
            {
              "description": "",
              "name": "--rh-footer-nojs-min-height",
              "default": "750px"
            }
          ],
          "cssParts": [
            {
              "description": "main footer element, containing all footer content",
              "name": "base"
            },
            {
              "description": "footer header, typically containing main logo and social links",
              "name": "header"
            },
            {
              "description": "primary footer header content, e.g. main logo",
              "name": "header-primary"
            },
            {
              "description": "secondary footer header content, e.g. social links",
              "name": "header-secondary"
            },
            {
              "description": "main page or product logo container",
              "name": "logo"
            },
            {
              "description": "social links container `<rh-footer-links>`",
              "name": "social-links"
            },
            {
              "description": "main content container.",
              "name": "main"
            },
            {
              "description": "container for main footer links",
              "name": "main-primary"
            },
            {
              "description": "container for main footer links",
              "name": "links"
            },
            {
              "description": "mobile links accordion header element",
              "name": "links-accordion-header"
            },
            {
              "description": "mobile links panel container element",
              "name": "links-accordion-panel"
            },
            {
              "description": "container fro prose or promotional content",
              "name": "main-secondary"
            }
          ],
          "slots": [
            {
              "description": "Overrides everything. Do not use.",
              "name": "base"
            },
            {
              "description": "Overrides `header-*`, `logo`, `social-links`",
              "name": "header"
            },
            {
              "description": "primary footer header content, e.g. main logo. Overrides `logo`",
              "name": "header-primary"
            },
            {
              "description": "secondary footer header content, e.g. social links. Overrides `social-links`",
              "name": "header-secondary"
            },
            {
              "description": "main page or product logo. Defaults to Red Hat corporate logo",
              "name": "logo"
            },
            {
              "description": "social media links (icons). Contains a default set of links",
              "name": "social-links"
            },
            {
              "description": "main footer content. Overrides `main-*`",
              "name": "main"
            },
            {
              "description": "main footer region. typically a columnar grid",
              "name": "main-primary"
            },
            {
              "description": "main footer links",
              "name": "links"
            },
            {
              "description": "typically contains prose or promotional content",
              "name": "main-secondary"
            },
            {
              "description": "must contain `<rh-global-footer>`",
              "name": "global"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "version",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "1.0.0-beta.33",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "getImportURL",
              "static": true,
              "return": {
                "type": {
                  "text": "string | URL"
                }
              },
              "parameters": [
                {
                  "name": "relativeLocation",
                  "type": {
                    "text": "string | URL"
                  }
                }
              ],
              "description": "Isomorphic import.meta.url function\nRequires a node.js dom shim that sets window.location"
            },
            {
              "kind": "field",
              "name": "#matchMedia",
              "privacy": "private",
              "default": "new MatchMediaController(this, `(min-width: ${tabletLandscapeBreakpoint})`)"
            },
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)"
            },
            {
              "kind": "field",
              "name": "colorPalette",
              "type": {
                "text": "ColorPalette"
              },
              "default": "'darker'",
              "attribute": "color-palette",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "#renderLinksTemplate",
              "parameters": [
                {
                  "name": "isMobile",
                  "default": "false"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateAccessibility",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Get any `<ul>`s that are in the designated link slots\nand syncronously update each list and header if we need to."
            }
          ],
          "attributes": [
            {
              "name": "color-palette",
              "type": {
                "text": "ColorPalette"
              },
              "default": "'darker'",
              "fieldName": "colorPalette"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "rh-footer",
          "customElement": true,
          "demos": [
            {
              "url": "https://ux.redhat.com/components/footer/demo/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-footer/demo/rh-footer.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/footer/demo/global-footer/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-footer/demo/global-footer.html"
              }
            },
            {
              "url": "https://ux.redhat.com/components/footer/demo/proxy/",
              "source": {
                "href": "https://github.com/redhat-ux/red-hat-design-system/tree/main/elements/rh-footer/demo/proxy.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RhFooter",
          "declaration": {
            "name": "RhFooter",
            "module": "elements/rh-footer/RhFooter.js"
          }
        }
      ]
    }
  ]
}
