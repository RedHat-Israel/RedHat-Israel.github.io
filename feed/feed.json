{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Red Hat Israel",
  "language": "he",
  "home_page_url": "https://israel.redhat.com/",
  "feed_url": "https://israel.redhat.com/feed/feed.json",
  "description": "About the Red Hat Israel site",
  "author": {
    "name": "Red Hat Israel Associates",
    "url": "https://israel.redhat.com/about/"
  },
  "items": [{
      "id": "https://israel.redhat.com/posts/2022-12-18-decompose-conditionals-and-its-tradeoffs-36ba/",
      "url": "https://israel.redhat.com/posts/2022-12-18-decompose-conditionals-and-its-tradeoffs-36ba/",
      "title": "Decompose Conditionals and its tradeoffs",
      "content_html": "<h1 id=\"decompose-conditionals-and-its-tradeoffs\" tabindex=\"-1\">Decompose Conditionals and its tradeoffs <a class=\"direct-link\" href=\"https://israel.redhat.com/posts/2022-12-18-decompose-conditionals-and-its-tradeoffs-36ba/#decompose-conditionals-and-its-tradeoffs\" aria-hidden=\"true\">#</a></h1>\n<p>Decomposing conditionals is a common refactoring strategy.\nThe main idea is that a complex <code>if... else...</code> statement is difficult to follow and understand, and can be decomposed into smaller pieces. But it does not come without a cost.</p>\n<hr />\n<p>Instead of having multi-line conditions, the decompose conditional pattern states that conditional logic should be extracted to 3 separate methods, one for each part of the statement: one for the condition itself, one for the &quot;true&quot; branch and one for the &quot;false&quot; branch.</p>\n<p>For example, if your code looks like this:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><br /><span class=\"token keyword\">if</span> baby<span class=\"token punctuation\">.</span><span class=\"token function\">IsAwake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> baby<span class=\"token punctuation\">.</span>State <span class=\"token operator\">==</span> <span class=\"token string\">\"Crying\"</span> <span class=\"token operator\">&amp;&amp;</span> baby<span class=\"token punctuation\">.</span>TimeSinceLastMeal <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Hour <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">if</span> baby<span class=\"token punctuation\">.</span>Diaper<span class=\"token punctuation\">.</span><span class=\"token function\">IsDirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />        baby<span class=\"token punctuation\">.</span><span class=\"token function\">ChangeDiaper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />    <span class=\"token punctuation\">}</span><br />    bottle <span class=\"token operator\">:=</span> <span class=\"token function\">NewBabyBottle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />    bottle<span class=\"token punctuation\">.</span><span class=\"token function\">FillWater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />    bottle<span class=\"token punctuation\">.</span><span class=\"token function\">AddMilkFormula</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />    bottle<span class=\"token punctuation\">.</span><span class=\"token function\">Shake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />    baby<span class=\"token punctuation\">.</span><span class=\"token function\">Feed</span><span class=\"token punctuation\">(</span>bottle<span class=\"token punctuation\">)</span><br />    baby<span class=\"token punctuation\">.</span><span class=\"token function\">Burp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br /><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br />    baby<span class=\"token punctuation\">.</span><span class=\"token function\">Cuddle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />    baby<span class=\"token punctuation\">.</span><span class=\"token function\">Play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br /><span class=\"token punctuation\">}</span><br /><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></code></pre>\n<p>Decomposing the conditional would mean refactoring your code to look something like this:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><br /><span class=\"token keyword\">if</span> baby<span class=\"token punctuation\">.</span><span class=\"token function\">IsHungry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    baby<span class=\"token punctuation\">.</span><span class=\"token function\">ChangeAndFeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br /><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br />    baby<span class=\"token punctuation\">.</span><span class=\"token function\">FunTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br /><span class=\"token punctuation\">}</span><br /><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><br /><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>baby <span class=\"token operator\">*</span>Baby<span class=\"token punctuation\">)</span> <span class=\"token function\">IsHungry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">return</span> baby<span class=\"token punctuation\">.</span><span class=\"token function\">IsAwake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> baby<span class=\"token punctuation\">.</span>State <span class=\"token operator\">==</span> <span class=\"token string\">\"Crying\"</span> <span class=\"token operator\">&amp;&amp;</span> baby<span class=\"token punctuation\">.</span>TimeSinceLastMeal <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Hour<br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>baby <span class=\"token operator\">*</span>Baby<span class=\"token punctuation\">)</span> <span class=\"token function\">ChangeAndFeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">if</span> baby<span class=\"token punctuation\">.</span>Diaper<span class=\"token punctuation\">.</span><span class=\"token function\">IsDirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />        baby<span class=\"token punctuation\">.</span><span class=\"token function\">ChangeDiaper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />    <span class=\"token punctuation\">}</span><br />    bottle <span class=\"token operator\">:=</span> <span class=\"token function\">NewBabyBottle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />    bottle<span class=\"token punctuation\">.</span><span class=\"token function\">FillWater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />    bottle<span class=\"token punctuation\">.</span><span class=\"token function\">AddMilkFormula</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />    bottle<span class=\"token punctuation\">.</span><span class=\"token function\">Shake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />    baby<span class=\"token punctuation\">.</span><span class=\"token function\">Feed</span><span class=\"token punctuation\">(</span>bottle<span class=\"token punctuation\">)</span><br />    baby<span class=\"token punctuation\">.</span><span class=\"token function\">Burp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>baby <span class=\"token operator\">*</span>Baby<span class=\"token punctuation\">)</span> <span class=\"token function\">FunTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    baby<span class=\"token punctuation\">.</span><span class=\"token function\">Cuddle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />    baby<span class=\"token punctuation\">.</span><span class=\"token function\">Play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>This change makes the main method flow much simpler to understand and follow, by abstracting away the complex logic that might not always be relevant for the reader.</p>\n<p>Extracting the logic to separate methods also allows us to more easily reuse or refactor our code in the future, as the logic is better encapsulated. For example, once our baby starts eating solid foods, we can modify the <code>ChangeAndFeed</code> method to reflect that easily, without needing to touch any code that is not directly related to this change, and the same is true if the logic for checking if the baby is hungry ever changes - for example, once our baby starts eating at 4 hour intervals.</p>\n<p>Another benefit from decomposing the conditional is that we can now write unit tests for the decomposed methods, ensuring that our logic is correct, and that it will not break due to future changes.</p>\n<hr />\n<p>If decomposing conditionals is so great, than why don't we always do it?\nLike everything in software engineering, there is a tradeoff.</p>\n<p>When extracting logic to a separate method, there is additional overhead. While the overhead of a function call in most languages is minimal (except in very extreme cases, such as deep recursion or tightly resource-constrained environments), the overhead for the code reader is not. Software engineers spend much more time reading code than they do writing code, and we should always think about how we can make our code more readable. Jumping back and forth between method definitions and calls adds complexity for the reader who is interested in understanding what the code does, for example when reviewing or debugging it.</p>\n<p>Take the following code for example. Which version is easier to understand and follow, this one:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>orgIDs<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> maxItems <span class=\"token operator\">||</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>userIDs<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> maxItems <span class=\"token punctuation\">{</span><br />   <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">BadRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too Many Items\"</span><span class=\"token punctuation\">)</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>or this one?</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> <span class=\"token function\">validateIDsSize</span><span class=\"token punctuation\">(</span>orgIDs<span class=\"token punctuation\">,</span> userIDs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">return</span> <span class=\"token function\">tooManyItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br /><span class=\"token punctuation\">}</span><br /><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><br /><span class=\"token keyword\">func</span> <span class=\"token function\">validateIDsSize</span><span class=\"token punctuation\">(</span>ids <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span><br />\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> idGroup <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ids <span class=\"token punctuation\">{</span><br />\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>idGroup<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> maxItems <span class=\"token punctuation\">{</span><br />\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><br />\t\t<span class=\"token punctuation\">}</span><br />\t<span class=\"token punctuation\">}</span><br />\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token keyword\">func</span> <span class=\"token function\">tooManyItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">BadRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too Many Items\"</span><span class=\"token punctuation\">)</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>The keyword here is <em>Complexity</em>. The question we should be asking is: &quot;Is this piece of code complex enough that extracting it to a separate method will make it more readable or not?&quot;\nIf the answer is that the code is clear enough to understand inline, we should avoid decomposing it to a separate function unless there is a very good reason to do so - such as a need for re-usability or testing.</p>\n<hr />\n<p>The second example also shows another common risk we face when extracting logic to separate methods: a premature attempt at generalization. While the first version only checks two specific values, the second one tries to create a generic function that can accept any number of values.</p>\n<p>The generic version of the check creates additional complexity to handle all possible cases, instead of a simpler check to handle the specific case we are facing.\nIf we have many similar cases with different values being checked, it could make sense to create a generic function that handles all cases.\nHowever, we often find a generic function being only used in one or two places, in which case - the added complexity usually doesn't pay off when compared to a non-generic version.</p>\n<p>We also don't yet know that all potential future cases will behave the same. For example, what if in the future different values will have different limits? The generic implementation assumes all values are limited by <code>maxItems</code> - meaning if this assumption ever changes, this method will become even more complex. A non-generic implementation is easier to change as we discover new requirements.</p>\n<hr />\n<p>When used correctly, decomposing conditionals is a useful refactoring method that can make our code easier to understand, easier to test, and more reusable. However, before we approach refactoring our code, we must always keep in mind our end goals and consider the possible tradeoffs in each approach.</p>\n",
      "date_published": "2022-12-18T00:00:00Z"
    },{
      "id": "https://israel.redhat.com/posts/form-associated-custom-elements/",
      "url": "https://israel.redhat.com/posts/form-associated-custom-elements/",
      "title": "Form-Associated Custom Elements",
      "content_html": "<p>Form-Associated Custom Elements are a new web standard by which to build custom\ninteractive form controls like buttons, inputs, checkboxes, etc. They present a\npath forward for design-systems and other custom element authors to more deeply\nintegrate with the web platform. In this post, we'll build a simple FACE to get\na feel for the APIs.</p>\n<h2 id=\"how-does-this-help\" tabindex=\"-1\">How Does this Help? <a class=\"direct-link\" href=\"https://israel.redhat.com/posts/form-associated-custom-elements/#how-does-this-help\" aria-hidden=\"true\">#</a></h2>\n<p>FACE adds crucial <strong>accessibility</strong> and <strong>interactivity</strong> features to web\ncomponents, closing gaps between web components, framework components, and\nnative browser controls. Before FACE, web component authors had to apply one of\na number of <a href=\"https://israel.redhat.com/posts/form-associated-custom-elements/#workarounds\">workarounds</a> each with their own trade-offs.</p>\n<p>Teams <em>developing</em> FACEs can now implement accessible custom controls with\nsimpler HTML APIs while retaining the benefits of Shadow DOM.</p>\n<p>But before we get to the code, some history:</p>\n<details open=\"\"><summary>Skip the history bit</summary>\n<h2 id=\"how-we-got-here\" tabindex=\"-1\">How we Got Here <a class=\"direct-link\" href=\"https://israel.redhat.com/posts/form-associated-custom-elements/#how-we-got-here\" aria-hidden=\"true\">#</a></h2>\n<p>The web components v1 standard originally defined two kinds of custom elements.\nThe most popular kind is called and <em><a href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#autonomous-custom-element\">autonomous custom element</a></em>, and\nit's what most people think about when they think of web components. The other\nkind is called a <em><a href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#customized-built-in-element\">customized built-in element</a></em>, and they look like\nthis:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">XButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLButtonElement</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">static</span> is <span class=\"token operator\">=</span> <span class=\"token string\">'x-button'</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br />customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span>XButton<span class=\"token punctuation\">.</span>is<span class=\"token punctuation\">,</span> XButton<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">extends</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>You use CBIEs like this:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>I'm an XButton<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Notice the big differences here: <code>XButton</code> the customized built-in extends\n<code>HTMLButtonElement</code>, not <code>HTMLElement</code>, and when you register it, you have to\npass both the custom element name <code>x-button</code> as well as the <code>localName</code> of the\n<code>button</code> element it extends. When using it in HTML, the <code>localName</code> of the\nelement is <code>button</code> and the <code>is</code> attribute determines which subclass of\n<code>HTMLButtonElement</code> to upgrade with.</p>\n<p>The chief advantage of customized built-ins was that they came with all the\noriginal features of their base elements, well, built-in. So a custom-element\nauthor wouldn't need to implement a bunch of stuff to make their custom\ntextfield go, rather they could just extend the existing <code>HTMLInputElement</code>\nclass and get all the necessary and expected functionality (especially crucial\naccessibility features) for free. Typical OOP stuff. So if customized built-ins\nare so great, how come this post isn't about them and how come we rarely see\nthem?</p>\n<p>Unfortunately, although customized built-ins remain a part of the spec, <strong>you\nshould not build them</strong>. The reason for this is discouraging: despite the spec's\nratification, Apple's WebKit team <a href=\"https://b.webkit.org/show_bug.cgi?id=182671\">stated</a> that they would decline to\nimplement customized built-ins.</p>\n<p>Since WebKit enjoys an <a href=\"https://open-web-advocacy.org/\">artificial monopoly</a> on iOS devices,\nthe WebKit team's decision has an outsized effect on the industry. Think &quot;US\nElectoral College&quot;, but for web browsers. Their decision not to implement makes\ncustomized built-ins a non-starter. Some prominent web developers (most notably\nAndrea Giammarchi) have advocated permanently adopting a polyfill, but the\nbroader web components community has generally acquiesced to WebKit's decision.</p>\n<p>Which is how FACE came to be, it's the alternative to CBIEs that the WebKit team\nchampioned.</p>\n</details>\n<h2 id=\"workarounds\" tabindex=\"-1\">Workarounds <a class=\"direct-link\" href=\"https://israel.redhat.com/posts/form-associated-custom-elements/#workarounds\" aria-hidden=\"true\">#</a></h2>\n<p>Before FACE, page authors using custom elements had two options to submit forms\nwith data from their web components:</p>\n<ol>\n<li>The &quot;decorator pattern&quot; - slotting native controls into autonomous custom elements</li>\n<li>Using JavaScript to manually submit form data</li>\n</ol>\n<p>Each of these had their pros and cons.</p>\n<h3 id=\"the-decorator-pattern\" tabindex=\"-1\">The Decorator Pattern <a class=\"direct-link\" href=\"https://israel.redhat.com/posts/form-associated-custom-elements/#the-decorator-pattern\" aria-hidden=\"true\">#</a></h3>\n<p>The most versatile workaround for autonomous custom controls involves slotting\nnative controls into the custom element.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-checkbox</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-checkbox</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>The advantages to this approach include <code>&lt;noscript&gt;</code> support and hassle-free\nform participation. The disadvantages include HTML noise and awkward styling due\nto the current limitations of <code>::slotted()</code>. This is compounded by the\nrequirement to <code>&lt;label&gt;</code> elements, leading to stricter HTML requirements,\ncopying nodes into the shadow root, producing hidden light DOM nodes, or other\nworkarounds-for-the-workaround.</p>\n<h3 id=\"manually-submitting-forms\" tabindex=\"-1\">Manually Submitting Forms <a class=\"direct-link\" href=\"https://israel.redhat.com/posts/form-associated-custom-elements/#manually-submitting-forms\" aria-hidden=\"true\">#</a></h3>\n<p>Developers working on SPAs might opt instead to put their native inputs in the\nshadow DOM and use JavaScript to submit the form data to a JSON API. Here's a\nsimple example of how that might work:</p>\n<pre class=\"language-js\"><code class=\"language-js\">form<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token function\">somehowCollectFormValuesFromCustomControls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> action<span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token string\">'POST'</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> form<span class=\"token punctuation\">;</span><br />  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> method<span class=\"token punctuation\">,</span> body <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Given the right abstractions this approach could be quite productive for\ndevelopers, but ties the controls to JavaScript.</p>\n<h2 id=\"creating-a-face\" tabindex=\"-1\">Creating a FACE <a class=\"direct-link\" href=\"https://israel.redhat.com/posts/form-associated-custom-elements/#creating-a-face\" aria-hidden=\"true\">#</a></h2>\n<p>Form-Associated Custom Elements solves one of the problems that <code>is</code> and\ncustomized built-in elements <a href=\"https://israel.redhat.com/posts/form-associated-custom-elements/#how-we-got-here\">would have solved</a>, namely,\nallowing your web component to participate in native web forms.</p>\n<p>We create a FACE by setting the static <code>formAssociated</code> boolean flag and\nregistering the custom element.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">XCheckbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">static</span> formAssociated <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br />customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x-checkbox'</span><span class=\"token punctuation\">,</span> XCheckbox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"a-free-lunch\" tabindex=\"-1\">A Free Lunch <a class=\"direct-link\" href=\"https://israel.redhat.com/posts/form-associated-custom-elements/#a-free-lunch\" aria-hidden=\"true\">#</a></h3>\n<p>So what does this give us? Well, right off the bat, that one static class\nboolean adds a number of form-related behaviours to our otherwise plain element.\nThe <code>name</code>, <code>form</code>, and <code>disabled</code> attributes now work the same as native\n<code>&lt;input&gt;</code> elements, and the presence of the <code>readonly</code> attribute will prevent\nthe browser from trying to validate your field, although you're still\nresponsible to make the control <em>actually</em> non-editable. Naming your FACE and\nspecifying a form (by child composition or via <code>form</code> attribute) adds it to the\nform's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\"><code>HTMLFormControlsCollection</code></a>, as well, if the element or\nit's containing <code>&lt;formset&gt;</code> has the <code>disabled</code> attribute, it will gain the CSS\nstate <code>:disabled</code>.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset</span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xcheck<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Check?<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-checkbox</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xcheck<span class=\"token punctuation\">\"</span></span><br />                <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkit<span class=\"token punctuation\">\"</span></span><br />                <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-checkbox</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset</span><span class=\"token punctuation\">></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>In the above snippet, our custom checkbox is disabled on account of its\ncontaining fieldset, and the form submits with its value on <code>checkit</code>. Removing\n<code>disabled</code> from the fieldset also unsets it from the element, without the\nelement author needing to apply any extra code.</p>\n<p>We also get some new lifecycle callbacks:</p>\n<ul>\n<li><code>formAssociatedCallback(form: HTMLFormElement)</code> runs when our element is\nassociated with a <code>&lt;form&gt;</code>, either by being it's child or by setting the\nelement's <code>form</code> attribute to the id of the form.</li>\n<li><code>formDisabledCallback(state: boolean)</code> runs when the element's <code>disabled</code>\nstate changes, either because it or it's containing fieldset's <code>disabled</code>\nattribute changed.</li>\n<li><code>formResetCallback()</code> runs when the element's associated form has it's\n<code>reset()</code> method called. You can use this e.g. to reset to a default value.</li>\n<li><code>formStateRestoreCallback(reason: 'autocomplete'|'restore')</code> runs when the\nbrowser autofills the form. It takes a single argument of type\n<code>'autocomplete'|'restore'</code>, depending on whether the browser called it because\nof an autocomplete or a navigation.</li>\n</ul>\n<p>All of that comes for free, even before implementing any actual custom control\nbehaviour. So let's add in the actual checkbox stuff now, just like we would\nhave done before the new standards.</p>\n<h3 id=\"customizing-the-ui\" tabindex=\"-1\">Customizing the UI <a class=\"direct-link\" href=\"https://israel.redhat.com/posts/form-associated-custom-elements/#customizing-the-ui\" aria-hidden=\"true\">#</a></h3>\n<p>Let's start by writing an accessor pair to link our element's <code>checked</code> property\nto the corresponding HTML attribute:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">get</span> <span class=\"token function\">checked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'checked'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br /><span class=\"token keyword\">set</span> <span class=\"token function\">checked</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggleAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'checked'</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>Built-in checkboxes set their value DOM property to either the <code>value</code>\nattribute's value or the string <code>on</code>, so let's do that too:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token string\">'on'</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br /><span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>We'll add <code>checked</code> and <code>value</code> to our <code>observedAttributes</code> list, then call our\n<code>connectedCallback</code> (providing a highly <em>aesthetic</em> UX), in <code>attributeChangedCallback</code>.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#container<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>checked <span class=\"token operator\">?</span> <span class=\"token string\">'✅'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'❌'</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">case</span> <span class=\"token string\">'checked'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>checked <span class=\"token operator\">=</span> value <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br />    <span class=\"token keyword\">case</span> <span class=\"token string\">'value'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>And last we'll add some keyboard and pointer interaction</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#onClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keydown'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#onKeydown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br />    <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>XCheckbox<span class=\"token punctuation\">.</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><br /><span class=\"token function\">#onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token function\">#onKeydown</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">case</span> <span class=\"token string\">' '</span><span class=\"token operator\">:</span><br />      event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token function\">#toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>checked <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Now that our checkbox looks and feels like a checkbox, the last thing to do is\nto hook into the browser's HTML form lifecycle with another new standard,\n<a href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#the-elementinternals-interface\"><code>ElementInternals</code></a>.</p>\n<h3 id=\"form-interactions\" tabindex=\"-1\">Form Interactions <a class=\"direct-link\" href=\"https://israel.redhat.com/posts/form-associated-custom-elements/#form-interactions\" aria-hidden=\"true\">#</a></h3>\n<p>Along with FACE, <code>ElementInternals</code> gives custom element authors new\ncapabilities. Specifically, element internals are a standard place to implement\nthings like form control validation and accessibility. <code>ElementInternals</code> is\ndesigned as a catch-all bag of properties and methods for working with custom\nelements. We can expect expansions to its capabilities in the future, but for\nnow it contains three parts:</p>\n<ol>\n<li>A reference to the element's shadow root, if it exists</li>\n<li>Form-related properties</li>\n<li>Accessibility-related properties</li>\n</ol>\n<p><code>HTMLElement</code> get a new standard method called <code>attachInternals()</code> which returns\nan <code>ElementInternals</code> object. This method may only be called on autonomous\ncustom elements and will throw if called on built-ins, customized or otherwise.\nYou hook your control's custom implementation into it's associated form with\n<code>ElementInternals</code>' form properties.</p>\n<p>Let's create our <code>ElementInternals</code> object by calling\n<code>attachInternals</code>, and store it on a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">private class field</a>.</p>\n<pre class=\"language-js\"><code class=\"language-js\">#internals <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachInternals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Then, in our <code>connectedCallback</code>, we'll apply the checkbox' value to it's\n<code>FormData</code> entry:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#internals<span class=\"token punctuation\">.</span><span class=\"token function\">setFormValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>checked <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>That <code>setFormValue</code> call is part of the <code>ElementInternals</code> secret sauce. Calling\nit with a non-nullish value adds our control's value to the form's <code>FormData</code>\nobject, whereas calling it with <code>null</code> removes the value.</p>\n<p>We can also implement form validation in our custom controls with the following\ninternals properties and methods:</p>\n<ul>\n<li><code>willValidate(): boolean</code> checks whether the element will be validated when\nthe form submits</li>\n<li><code>setValidity()</code> sets the element's form validity state</li>\n<li><code>checkValidity()</code> and <code>reportValidity()</code> work just like their native\ncounterparts.</li>\n</ul>\n<p>Custom validations are a big topic so let's save their more in-depth explanation\nfor another day.</p>\n<h3 id=\"accessibility\" tabindex=\"-1\">Accessibility <a class=\"direct-link\" href=\"https://israel.redhat.com/posts/form-associated-custom-elements/#accessibility\" aria-hidden=\"true\">#</a></h3>\n<p>The other major feature of <code>ElementInternals</code> are it's a11y-related properties\n<code>role</code> and <code>aria*</code>. Part of the <a href=\"https://wicg.github.io/aom/explainer.html\">AOM</a>, we can now set <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/\">ARIA</a>\nproperties imperatively without needing to set <code>aria-</code> attributes. These are\ncritical capabilities which previously only had partial workarounds.</p>\n<p>Let's start by setting the <code>role</code> so that screen readers announce our element as a checkbutton. Note that as of this writing Firefox (107) has not yet implemented role reflection, so we'll do some feature detection</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'role'</span> <span class=\"token keyword\">in</span> <span class=\"token class-name\">ElementInternals</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#internals<span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> <span class=\"token string\">'checkbox'</span><span class=\"token punctuation\">;</span><br /><span class=\"token keyword\">else</span><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'role'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'checkbox'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>We'll update our <code>connectedCallback</code> to render to the a11y tree as well as the\nDOM. Like role reflection, we'll apply a workaround for Firefox:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'ariaChecked'</span> <span class=\"token keyword\">in</span> <span class=\"token class-name\">ElementInternals</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#internals<span class=\"token punctuation\">.</span>ariaChecked <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token keyword\">else</span><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aria-checked'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Putting it all together, our custom checkbox:</p>\n<ul>\n<li>implements it's own bespoke UI</li>\n<li>participates in HTML forms like a native input</li>\n<li>is accessible to users of assistive technologies</li>\n</ul>\n<p><a href=\"https://bennypowers.dev/posts/form-associated-custom-elements/#simple-checkbox-example\">Check out the demo on the original post</a></p>\n<h2 id=\"browser-support-and-polyfills\" tabindex=\"-1\">Browser Support and Polyfills <a class=\"direct-link\" href=\"https://israel.redhat.com/posts/form-associated-custom-elements/#browser-support-and-polyfills\" aria-hidden=\"true\">#</a></h2>\n<p>As of initial publication, Chromium (Google Chrome, Microsoft Edge, Brave, Arc)\nsupports the full range of APIs described here. Firefox supports\n<code>attachInternals</code> and <code>formAssociated</code> but does not support ARIA and role\nreflection. WebKit does not support any of the new APIs, but the commits to add\nsupport have been merged, so the next Safari Technology Preview is likely to add\nsupport.</p>\n<table>\n<thead>\n<tr>\n<th>Engine</th>\n<th>FACE</th>\n<th><code>ElementInternals</code></th>\n<th>AOM Reflection</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chromium</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>✅</td>\n<td>✅</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>WebKit</td>\n<td>❌</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody>\n</table>\n<p>The inimitable Caleb D. Williams has kindly published an <a href=\"https://github.com/calebdwilliams/element-internals-polyfill\">ElementInternals\npolyfill</a> which weighs in at <a href=\"https://unpkg.com/element-internals-polyfill\">~6kb over-the-wire</a>. Since\nthe spec involves hooking into browser stuff which is otherwise unavailable to\ndevelopers, the polyfill is not 100% spec compliant. For example, ARIA\nreflection is implemented by adding <code>aria-</code> attributes to the host element,\nwhere the spec states that they should not be added. The polyfill also adds a\nworkaround for the <a href=\"https://wicg.github.io/custom-state-pseudo-class/#dom-elementinternals-states\">custom state</a> part of the spec, which was not\ncovered here.</p>\n<p>Thoughts? Corrections? Comments? Let me know on <a href=\"https://social.bennypowers.dev/@i\">mastodon</a>.</p>\n",
      "date_published": "2022-11-14T00:00:00Z"
    },{
      "id": "https://israel.redhat.com/posts/apache-commons-config/",
      "url": "https://israel.redhat.com/posts/apache-commons-config/",
      "title": "Ways to replace apache.commons.configuration in your project",
      "content_html": "<p>If you’re using <code>apache.commons.configuration</code> to manage <code>.properties</code> files in your project, you’re\nprobably facing the following problem:\n<code>Apache.commons.configuration</code> depends on <code>apache.common.logging</code> which is included in <code>maven:3.5</code>,\nbut was removed from <code>maven:3.6</code>.\nThus, if you want to upgrade you will need to find a different way to parse your properties.</p>\n<p>Java offers the <a href=\"https://docs.oracle.com/javase/tutorial/essential/environment/properties.html\"><code>java.util.Properties</code>\nclass</a>, which is a\nsubclass of <code>java.util.Hashtable</code>.\nIt maintains a list of keys and values, both are of type String, and provides methods for the\nfollowing operations:\nLoading and saving the properties, getting a value by key, listing the keys and values, enumerating\nover the keys, and the methods inherited from the <code>Hashtable</code> class.</p>\n<h2 id=\"but-what-if-our-data-is-complex\" tabindex=\"-1\">But what if our data is complex? <a class=\"direct-link\" href=\"https://israel.redhat.com/posts/apache-commons-config/#but-what-if-our-data-is-complex\" aria-hidden=\"true\">#</a></h2>\n<p>If we have nested properties <em>(i.e <code>food.apple=red</code>, <code>food.icecream=vanilla</code>, <code>drink.milk=soy</code>,\n<code>drink.soft=coke</code>)</em> how will we find all of the information about the main key (<code>food</code>, in this\nexample)?\nIn order to retrieve the complete value we will need to iterate over the entire <code>Hashtable</code>,\nsearching for all of the keys that contain <code>food.</code>.</p>\n<p>Here comes the biggest advantage of using <code>apache.commons.configuration</code>-\nIt offers a generic configuration interface to read data from a variety of sources, and access to\nsingle and multi-valued configuration parameters.</p>\n<p>When I started working on removing the dependency on <code>apache.commons.configuration</code>, I figured that\nsince the properties we use are nested, I should see which methods of <code>apache.commons.configuration</code>\nwe are actually using, and then I tried to mimic the original implementation. It was very tricky as\nI faced a whole chain of inheritance and interfaces to implement.\nAfter already putting some work into it, I decided to drop it all and go with a different approach.\nThe main thing I had to handle was being able to set the nested properties properly.\nI decided to save the properties into a <code>HashMap</code> that stores <code>String</code> for the key, and <code>JsonNode</code>\nfor the value.\nThat way I could set and get each property by its main key easily, and get the specific data of a\nspecific secondary key if needed. For other operations I used the <code>HashMap</code>’s builtin methods.</p>\n<p>Here’s a snippet of my implementation for storing the data from the <code>.properties</code> file, where I used\n<code>com.fasterxml.jackson</code> for handling the JsonNode:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">populateProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token class-name\">ObjectMapper</span> mapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token class-name\">List</span> lines <span class=\"token operator\">=</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">readAllLines</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">toPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> allProps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> line<span class=\"token operator\">:</span> lines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />            allProps<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />        <span class=\"token punctuation\">}</span><br />    <span class=\"token punctuation\">}</span><br />    allProps<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br />        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mainKey <span class=\"token operator\">=</span> k<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>mainKey<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />            <span class=\"token class-name\">JsonNode</span> oldNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>mainKey<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectNode</span><span class=\"token punctuation\">)</span> oldNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>mainKey<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>mainKey<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> oldNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br />            <span class=\"token class-name\">ObjectNode</span> node <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">createObjectNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />            node<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>mainKey<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>mainKey<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />        <span class=\"token punctuation\">}</span><br />    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>When choosing to use this implementation, we need to handle the case of an IO Exception. That is a\nsmall price compared to the convenience of maintaining the nested properties in a simple format.</p>\n<p>To conclude, if you need to replace <code>apache.commons.configuration</code>, you can either use Java’s\n<code>Properties</code> class, or decide on your own implementation — preferably use a data structure to handle\nyour <code>.properties</code> file.<br />\nEach method has its own drawbacks.<br />\nUsing the <code>Properties</code> class will be most suitable for simple key-value pairs, while for nested data\nI’d recommend using a data structure where the key stores the main key, and the value will hold a\n<code>JsonNode</code> that will store the secondary keys and their values.</p>\n",
      "date_published": "2022-09-15T00:00:00Z"
    },{
      "id": "https://israel.redhat.com/posts/2022-06-19-attending-recruiting-fairs-as-an-engineer-b89/",
      "url": "https://israel.redhat.com/posts/2022-06-19-attending-recruiting-fairs-as-an-engineer-b89/",
      "title": "Attending recruiting fairs as an engineer",
      "content_html": "<p>Over the years, I’ve attended many student recruitment fairs representing Red\nHat, including a couple in the recent weeks. I always try to go to at least one\nfair every year if possible.</p>\n<p>But you might be wondering, is this the best usage of an engineer’s expensive work hours? Isn’t that the job of the talent acquisition team?\nIn my opinion, there is a lot of value for engineers to take part in these events, both for the organization and for the engineers themselves.</p>\n<p><img src=\"https://israel.redhat.com/posts/assets/recruiting_fair2.jpg\" alt=\"Recruiting fair at Tel Aviv Academic College\" /></p>\n<p>From the organization's perspective, let’s look at the several different goals from attending these events:</p>\n<ul>\n<li>The obvious goal, <strong>recruiting new employees</strong>. While recruiting is the TA team’s speciality, engineers can provide additional value - for example, answering candidates’ technological questions better, or quickly identifying promising candidates that might get missed otherwise. Candidates often prefer to talk with actual engineers and trust them more than the people whose job is to promote the company to them but lack in technical skills.</li>\n<li><strong>Employee branding</strong>: A few lucky students might get hired - but the impact of the fair can be much wider. Having enthusiastic engineers take part in the fair can do a lot in terms of exciting students about the company and how cool it would be to work there. Some students might not yet fit the requirements of your open positions, and an engineer can give them pointers and advice on what they need to do to get accepted in the future. The students are usually at the start of their career, and if you manage to make a good impression on them they might consider your company a good option for their entire career. Building the company’s reputation as a good employer helps get more candidates into the hiring pipeline.</li>\n<li><strong>Potential future customers</strong>: If your company’s products or services are targeted at a technically-proficient user base, you might meet people who will go on to work at one of your future customers. Building awareness of your products could help with sales down the line, and who better to excite future engineers about how great your products are than the people working on them?</li>\n<li><strong>Connecting employees to company mission</strong>: When people promote the company, they need to learn more about what it does and how to explain its mission quickly to others. Representing the company is a great way to increase employee engagement with your company, and increase their awareness of the company strategy beyond their day-to-day work.</li>\n</ul>\n<p><img src=\"https://israel.redhat.com/posts/assets/recruiting_fair3.jpg\" alt=\"Recruiting fair at Reichman University\" /></p>\n<p>But why should you, as an engineer, take precious time away from your development work to go to a student fair?</p>\n<ul>\n<li><strong>Company-wide impact</strong>: One of the key criteria for career advancement in most companies is closely related to your impact. Affecting the hiring process is one of the most significant and long-lasting impacts you can make. The people hired today will be a key factor in the company’s future success, and they may even outlast you as an employee. If you manage to improve the quality of the candidates hired, this will have a compound impact for years to come.</li>\n<li><strong>Practice public speaking and interpersonal communication skills</strong>: If you’re an introvert like me, talking to strangers can be very tough. Recruitment fairs provide you with an opportunity to talk to people who you know are interested in what you have to say and hearing about your job. Sometimes you will get a somewhat pre-scripted pitch, so you don’t even have to prepare too much content - only describe the company to candidates and talk with them about your job.</li>\n<li><strong>Day out</strong>: Whether you normally work from home or the office, recruitment fairs are a great chance to break out from the regular routine, get a bit of vitamin D into your blood, stretch your muscles and breathe some fresh air. Your body will thank you for it.</li>\n<li><strong>Networking</strong>: Building a strong and wide network is key to growing your career and landing future opportunities. You will likely find yourself at the booth with people from your organization who you might not have worked with before. You might even make some connections with candidates or people staffing other companies’ booths. Take the time to get to know some of them better - who knows where they’ll be in the future and how they might be able to help you.</li>\n</ul>\n",
      "date_published": "2022-06-19T00:00:00Z"
    }
  ]
}
